; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\target_reset_lseries.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\target_reset_lseries.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DDAPLINK_VERSION=254 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\target_reset_lseries.crf ..\..\..\source\family\freescale\target_reset_Lseries.c]
                          THUMB

                          AREA ||i.security_bits_set||, CODE, READONLY, ALIGN=1

                  security_bits_set PROC
;;;109    //
;;;110    uint8_t static security_bits_set(uint32_t addr, uint8_t *data, uint32_t size)
000000  f240430c          MOV      r3,#0x40c
;;;111    {
;;;112        const uint32_t fsec_addr = 0x40C;
;;;113    
;;;114        if ((addr <= fsec_addr) && (addr + size) > fsec_addr) {
000004  4298              CMP      r0,r3
000006  d80f              BHI      |L1.40|
000008  4402              ADD      r2,r2,r0
00000a  429a              CMP      r2,r3
00000c  d90c              BLS      |L1.40|
;;;115            uint8_t fsec = data[fsec_addr - addr];
00000e  1a08              SUBS     r0,r1,r0
000010  f890040c          LDRB     r0,[r0,#0x40c]
;;;116    
;;;117            // make sure we can unsecure the device or dont program at all
;;;118            if ((fsec & 0x30) == 0x20) {
000014  f3c01101          UBFX     r1,r0,#4,#2
000018  2902              CMP      r1,#2
00001a  d003              BEQ      |L1.36|
;;;119                // Dont allow programming mass-erase disabled state
;;;120                return 1;
;;;121            }
;;;122    
;;;123            // Security is OK long as we can mass-erase (comment the following out to enable target security)
;;;124            if ((fsec & 0x03) != 0x02) {
00001c  f0000003          AND      r0,r0,#3
000020  2802              CMP      r0,#2
000022  d001              BEQ      |L1.40|
                  |L1.36|
;;;125                return 1;
000024  2001              MOVS     r0,#1
;;;126            }
;;;127        }
;;;128    
;;;129        return 0;
;;;130    }
000026  4770              BX       lr
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;129
00002a  4770              BX       lr
;;;131    
                          ENDP


                          AREA ||i.target_before_init_debug||, CODE, READONLY, ALIGN=1

                  target_before_init_debug PROC
;;;31     
;;;32     static void target_before_init_debug(void)
000000  2001              MOVS     r0,#1
;;;33     {
;;;34         swd_set_target_reset(1);
000002  f7ffbffe          B.W      swd_set_target_reset
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.target_unlock_sequence||, CODE, READONLY, ALIGN=2

                  target_unlock_sequence PROC
;;;36     
;;;37     static uint8_t target_unlock_sequence(void)
000000  b538              PUSH     {r3-r5,lr}
;;;38     {
;;;39         uint32_t val;
;;;40     
;;;41         // read the device ID
;;;42         if (!swd_read_ap(MDM_IDR, &val)) {
000002  4669              MOV      r1,sp
000004  481a              LDR      r0,|L3.112|
000006  f7fffffe          BL       swd_read_ap
00000a  2800              CMP      r0,#0
00000c  d005              BEQ      |L3.26|
;;;43             return 0;
;;;44         }
;;;45     
;;;46         // verify the result
;;;47         if (val != MDM_ID) {
00000e  9800              LDR      r0,[sp,#0]
000010  f5a011e0          SUB      r1,r0,#0x1c0000
000014  3920              SUBS     r1,r1,#0x20
000016  d001              BEQ      |L3.28|
;;;48             return 0;
000018  2000              MOVS     r0,#0
                  |L3.26|
;;;49         }
;;;50     
;;;51         if (!swd_read_ap(MDM_STATUS, &val)) {
;;;52             return 0;
;;;53         }
;;;54     
;;;55         // flash in secured mode
;;;56         if (val & (1 << 2)) {
;;;57             // hold the device in reset
;;;58             swd_set_target_reset(1);
;;;59     
;;;60             // write the mass-erase enable bit
;;;61             if (!swd_write_ap(MDM_CTRL, 1)) {
;;;62                 return 0;
;;;63             }
;;;64     
;;;65             while (1) {
;;;66                 // wait until mass erase is started
;;;67                 if (!swd_read_ap(MDM_STATUS, &val)) {
;;;68                     return 0;
;;;69                 }
;;;70     
;;;71                 if (val & 1) {
;;;72                     break;
;;;73                 }
;;;74             }
;;;75     
;;;76             // mass erase in progress
;;;77             while (1) {
;;;78                 // keep reading until procedure is complete
;;;79                 if (!swd_read_ap(MDM_CTRL, &val)) {
;;;80                     return 0;
;;;81                 }
;;;82     
;;;83                 if (val == 0) {
;;;84                     break;
;;;85                 }
;;;86             }
;;;87         }
;;;88     
;;;89         return 1;
;;;90     }
00001a  bd38              POP      {r3-r5,pc}
                  |L3.28|
00001c  f04f7580          MOV      r5,#0x1000000         ;51
000020  4669              MOV      r1,sp                 ;51
000022  4628              MOV      r0,r5                 ;51
000024  f7fffffe          BL       swd_read_ap
000028  2800              CMP      r0,#0                 ;51
00002a  d0f6              BEQ      |L3.26|
00002c  9800              LDR      r0,[sp,#0]            ;56
00002e  0740              LSLS     r0,r0,#29             ;56
000030  d51b              BPL      |L3.106|
000032  2001              MOVS     r0,#1                 ;58
000034  f7fffffe          BL       swd_set_target_reset
000038  1d2c              ADDS     r4,r5,#4              ;61
00003a  2101              MOVS     r1,#1                 ;61
00003c  4620              MOV      r0,r4                 ;61
00003e  f7fffffe          BL       swd_write_ap
000042  2800              CMP      r0,#0                 ;61
000044  d0e9              BEQ      |L3.26|
                  |L3.70|
000046  4669              MOV      r1,sp                 ;67
000048  4628              MOV      r0,r5                 ;67
00004a  f7fffffe          BL       swd_read_ap
00004e  2800              CMP      r0,#0                 ;67
000050  d0e3              BEQ      |L3.26|
000052  9800              LDR      r0,[sp,#0]            ;71
000054  07c0              LSLS     r0,r0,#31             ;71
000056  d0f6              BEQ      |L3.70|
                  |L3.88|
000058  4669              MOV      r1,sp                 ;79
00005a  4620              MOV      r0,r4                 ;79
00005c  f7fffffe          BL       swd_read_ap
000060  2800              CMP      r0,#0                 ;79
000062  d0da              BEQ      |L3.26|
000064  9800              LDR      r0,[sp,#0]            ;83
000066  2800              CMP      r0,#0                 ;83
000068  d1f6              BNE      |L3.88|
                  |L3.106|
00006a  2001              MOVS     r0,#1                 ;89
00006c  bd38              POP      {r3-r5,pc}
;;;91     
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x010000fc

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_nxp_kinetis_lseries
000000  0b02              DCW      0x0b02
000002  0100              DCB      0x01,0x00
                          DCD      0x00000000
                          DCD      target_before_init_debug
                          DCD      0x00000000
                          DCD      target_unlock_sequence
                          DCD      security_bits_set
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
