; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\usbd_msc.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usbd_msc.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DDAPLINK_VERSION=254 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\usbd_msc.crf ..\..\..\source\usb\msc\usbd_msc.c]
                          THUMB

                          AREA ||i.USBD_MSC_ATAPassThrough||, CODE, READONLY, ALIGN=2

                  USBD_MSC_ATAPassThrough PROC
;;;796    
;;;797    void USBD_MSC_ATAPassThrough(void)
000000  b570              PUSH     {r4-r6,lr}
;;;798    {
;;;799        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d02a              BEQ      |L1.96|
;;;800            return;
;;;801        }
;;;802    
;;;803        USBD_MSC_BulkBuf[ 0] = 0x02;
00000a  4816              LDR      r0,|L1.100|
00000c  2402              MOVS     r4,#2
;;;804        USBD_MSC_BulkBuf[ 1] = 0x02;
;;;805        BulkLen = 2;
00000e  4e16              LDR      r6,|L1.104|
000010  7004              STRB     r4,[r0,#0]            ;803
000012  7044              STRB     r4,[r0,#1]            ;804
;;;806        BulkStage = MSC_BS_DATA_IN_LAST;
000014  2003              MOVS     r0,#3
000016  6334              STR      r4,[r6,#0x30]  ; BulkLen
000018  7030              STRB     r0,[r6,#0]
;;;807    
;;;808        /* Win host requests maximum number of bytes but as all we have is 2 bytes we have
;;;809           to tell host back that it is all we have, that's why we correct residue */
;;;810        if (USBD_MSC_CSW.dDataResidue > BulkLen) {
00001a  4814              LDR      r0,|L1.108|
00001c  4605              MOV      r5,r0
00001e  f7fffffe          BL       __aeabi_uread4
000022  2802              CMP      r0,#2
000024  d908              BLS      |L1.56|
;;;811            USBD_MSC_CBW.dDataLength  = BulkLen;
000026  4911              LDR      r1,|L1.108|
000028  4620              MOV      r0,r4
00002a  391f              SUBS     r1,r1,#0x1f
00002c  f7fffffe          BL       __aeabi_uwrite4
000030  4629              MOV      r1,r5
000032  4620              MOV      r0,r4
;;;812            USBD_MSC_CSW.dDataResidue = BulkLen;
000034  f7fffffe          BL       __aeabi_uwrite4
                  |L1.56|
;;;813        }
;;;814    
;;;815        USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, USBD_MSC_BulkBuf, BulkLen);
000038  480d              LDR      r0,|L1.112|
00003a  4622              MOV      r2,r4
00003c  4909              LDR      r1,|L1.100|
00003e  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkin
000040  f0400080          ORR      r0,r0,#0x80
000044  f7fffffe          BL       USBD_WriteEP
000048  4628              MOV      r0,r5
;;;816        USBD_MSC_CSW.dDataResidue -= BulkLen;
00004a  f7fffffe          BL       __aeabi_uread4
00004e  6b31              LDR      r1,[r6,#0x30]  ; BulkLen
000050  1a40              SUBS     r0,r0,r1
000052  4629              MOV      r1,r5
000054  f7fffffe          BL       __aeabi_uwrite4
;;;817        USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
000058  4904              LDR      r1,|L1.108|
00005a  2001              MOVS     r0,#1
00005c  3908              SUBS     r1,r1,#8
00005e  7308              STRB     r0,[r1,#0xc]
                  |L1.96|
;;;818    }
000060  bd70              POP      {r4-r6,pc}
;;;819    
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      USBD_MSC_BulkBuf
                  |L1.104|
                          DCD      ||.data||
                  |L1.108|
                          DCD      ||.bss||+0x27
                  |L1.112|
                          DCD      usbd_msc_ep_bulkin

                          AREA ||i.USBD_MSC_BulkIn||, CODE, READONLY, ALIGN=2

                  USBD_MSC_BulkIn PROC
;;;1021   
;;;1022   void USBD_MSC_BulkIn(void)
000000  4911              LDR      r1,|L2.72|
;;;1023   {
000002  b510              PUSH     {r4,lr}
;;;1024       switch (BulkStage) {
000004  7808              LDRB     r0,[r1,#0]  ; BulkStage
000006  2802              CMP      r0,#2
000008  d008              BEQ      |L2.28|
00000a  2803              CMP      r0,#3
00000c  d010              BEQ      |L2.48|
00000e  2804              CMP      r0,#4
000010  d012              BEQ      |L2.56|
000012  2805              CMP      r0,#5
000014  d101              BNE      |L2.26|
;;;1025           case MSC_BS_DATA_IN:
;;;1026               switch (USBD_MSC_CBW.CB[0]) {
;;;1027                   case SCSI_READ10:
;;;1028                   case SCSI_READ12:
;;;1029                       USBD_MSC_MemoryRead();
;;;1030                       break;
;;;1031               }
;;;1032   
;;;1033               break;
;;;1034   
;;;1035           case MSC_BS_DATA_IN_LAST:
;;;1036               USBD_MSC_SetCSW();
;;;1037               break;
;;;1038   
;;;1039           case MSC_BS_DATA_IN_LAST_STALL:
;;;1040               USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
;;;1041               USBD_MSC_SetCSW();
;;;1042               break;
;;;1043   
;;;1044           case MSC_BS_CSW:
;;;1045               BulkStage = MSC_BS_CBW;
000016  2000              MOVS     r0,#0
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;1046               break;
;;;1047   
;;;1048           default:
;;;1049               break;
;;;1050       }
;;;1051   }
00001a  bd10              POP      {r4,pc}
                  |L2.28|
00001c  480b              LDR      r0,|L2.76|
00001e  7bc0              LDRB     r0,[r0,#0xf]          ;1026  ; USBD_MSC_CBW
000020  2828              CMP      r0,#0x28              ;1026
000022  d001              BEQ      |L2.40|
000024  28a8              CMP      r0,#0xa8              ;1026
000026  d1f8              BNE      |L2.26|
                  |L2.40|
000028  e8bd4010          POP      {r4,lr}               ;1029
00002c  f7ffbffe          B.W      USBD_MSC_MemoryRead
                  |L2.48|
000030  e8bd4010          POP      {r4,lr}               ;1036
000034  f7ffbffe          B.W      USBD_MSC_SetCSW
                  |L2.56|
000038  4805              LDR      r0,|L2.80|
00003a  7800              LDRB     r0,[r0,#0]            ;1040  ; usbd_msc_ep_bulkin
00003c  f0400080          ORR      r0,r0,#0x80           ;1040
000040  f7fffffe          BL       USBD_MSC_SetStallEP
000044  e7f4              B        |L2.48|
;;;1052   
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      ||.data||
                  |L2.76|
                          DCD      ||.bss||
                  |L2.80|
                          DCD      usbd_msc_ep_bulkin

                          AREA ||i.USBD_MSC_BulkOut||, CODE, READONLY, ALIGN=2

                  USBD_MSC_BulkOut PROC
;;;1059   
;;;1060   void USBD_MSC_BulkOut(void)
000000  4a20              LDR      r2,|L3.132|
;;;1061   {
000002  b510              PUSH     {r4,lr}
;;;1062       switch (BulkStage) {
000004  7811              LDRB     r1,[r2,#0]  ; BulkStage
000006  b369              CBZ      r1,|L3.100|
000008  2901              CMP      r1,#1
00000a  d00e              BEQ      |L3.42|
;;;1063           case MSC_BS_CBW:
;;;1064               USBD_MSC_GetCBW();
;;;1065               break;
;;;1066   
;;;1067           case MSC_BS_DATA_OUT:
;;;1068               switch (USBD_MSC_CBW.CB[0]) {
;;;1069                   case SCSI_WRITE10:
;;;1070                   case SCSI_WRITE12:
;;;1071                       USBD_MSC_MemoryWrite();
;;;1072                       break;
;;;1073   
;;;1074                   case SCSI_VERIFY10:
;;;1075                       USBD_MSC_MemoryVerify();
;;;1076                       break;
;;;1077               }
;;;1078               break;
;;;1079   
;;;1080           case MSC_BS_CSW:
;;;1081               // Previous transfer must be complete
;;;1082               // before the next transfer begins.
;;;1083               //
;;;1084               // If bulk out is stalled then just
;;;1085               // drop this packet and don't assert.
;;;1086               // This packet was left over from before
;;;1087               // the transfer aborted with a stall.
;;;1088               util_assert(USBD_EndPointHalt & (1 << usbd_msc_ep_bulkout));
00000c  481e              LDR      r0,|L3.136|
00000e  2905              CMP      r1,#5                 ;1062
000010  7800              LDRB     r0,[r0,#0]
000012  d01b              BEQ      |L3.76|
000014  2907              CMP      r1,#7                 ;1062
000016  d02b              BEQ      |L3.112|
;;;1089               break;
;;;1090   
;;;1091           case MSC_BS_RESET:
;;;1092               // If Bulk-Only Mass Storage Reset command was received on
;;;1093               // Control Endpoint ignore next Bulk OUT transfer if it was not
;;;1094               // a CBW (as it means it was a unprocessed leftover from 
;;;1095               // transfer before reset happened)
;;;1096               BulkStage = MSC_BS_CBW;
;;;1097               if (BulkLen == sizeof(USBD_MSC_CBW)) {
;;;1098                   // If it is a CBW size packet go process it as CBW
;;;1099                   USBD_MSC_GetCBW();
;;;1100               }
;;;1101               break;
;;;1102   
;;;1103           default:
;;;1104               USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
000018  f7fffffe          BL       USBD_MSC_SetStallEP
;;;1105               USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
00001c  491b              LDR      r1,|L3.140|
00001e  2002              MOVS     r0,#2
000020  7308              STRB     r0,[r1,#0xc]
;;;1106               USBD_MSC_SetCSW();
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      USBD_MSC_SetCSW
                  |L3.42|
00002a  4818              LDR      r0,|L3.140|
00002c  381f              SUBS     r0,r0,#0x1f           ;1068
00002e  7bc0              LDRB     r0,[r0,#0xf]          ;1068  ; USBD_MSC_CBW
000030  282a              CMP      r0,#0x2a              ;1068
000032  d003              BEQ      |L3.60|
000034  282f              CMP      r0,#0x2f              ;1068
000036  d005              BEQ      |L3.68|
000038  28aa              CMP      r0,#0xaa              ;1068
00003a  d122              BNE      |L3.130|
                  |L3.60|
00003c  e8bd4010          POP      {r4,lr}               ;1071
000040  f7ffbffe          B.W      USBD_MSC_MemoryWrite
                  |L3.68|
000044  e8bd4010          POP      {r4,lr}               ;1075
000048  f7ffbffe          B.W      USBD_MSC_MemoryVerify
                  |L3.76|
00004c  2101              MOVS     r1,#1                 ;1088
00004e  4081              LSLS     r1,r1,r0              ;1088
000050  480f              LDR      r0,|L3.144|
000052  6800              LDR      r0,[r0,#0]            ;1088  ; USBD_EndPointHalt
000054  4201              TST      r1,r0                 ;1088
000056  d001              BEQ      |L3.92|
000058  2001              MOVS     r0,#1                 ;1088
00005a  e000              B        |L3.94|
                  |L3.92|
00005c  2000              MOVS     r0,#0                 ;1088
                  |L3.94|
00005e  f44f6288          MOV      r2,#0x440             ;1088
000062  e000              B        |L3.102|
                  |L3.100|
000064  e009              B        |L3.122|
                  |L3.102|
000066  e8bd4010          POP      {r4,lr}               ;1088
00006a  a10a              ADR      r1,|L3.148|
00006c  f7ffbffe          B.W      _util_assert
                  |L3.112|
000070  2000              MOVS     r0,#0                 ;1096
000072  7010              STRB     r0,[r2,#0]            ;1096
000074  6b10              LDR      r0,[r2,#0x30]         ;1097  ; BulkLen
000076  281f              CMP      r0,#0x1f              ;1097
000078  d103              BNE      |L3.130|
                  |L3.122|
00007a  e8bd4010          POP      {r4,lr}               ;1099
00007e  f7ffbffe          B.W      USBD_MSC_GetCBW
                  |L3.130|
;;;1107               break;
;;;1108       }
;;;1109   }
000082  bd10              POP      {r4,pc}
;;;1110   
                          ENDP

                  |L3.132|
                          DCD      ||.data||
                  |L3.136|
                          DCD      usbd_msc_ep_bulkout
                  |L3.140|
                          DCD      ||.bss||+0x1f
                  |L3.144|
                          DCD      USBD_EndPointHalt
                  |L3.148|
000094  2e2e5c2e          DCB      "..\\..\\..\\source\\usb\\msc\\usbd_msc.c",0
000098  2e5c2e2e
00009c  5c736f75
0000a0  7263655c
0000a4  7573625c
0000a8  6d73635c
0000ac  75736264
0000b0  5f6d7363
0000b4  2e6300  
0000b7  00                DCB      0

                          AREA ||i.USBD_MSC_CheckMedia||, CODE, READONLY, ALIGN=2

                  USBD_MSC_CheckMedia PROC
;;;143    
;;;144    BOOL USBD_MSC_CheckMedia(void)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146        USBD_MSC_MediaReadyEx = USBD_MSC_MediaReady;
000002  4c13              LDR      r4,|L4.80|
000004  6860              LDR      r0,[r4,#4]  ; USBD_MSC_MediaReady
000006  60e0              STR      r0,[r4,#0xc]          ;145  ; USBD_MSC_MediaReadyEx
000008  b108              CBZ      r0,|L4.14|
;;;147    
;;;148        if (!USBD_MSC_MediaReady) {
;;;149            if (USBD_MSC_CBW.dDataLength) {
;;;150                if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {
;;;151                    USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
;;;152                } else {
;;;153                    if (USBD_MSC_CSW.dDataResidue != BulkLen) {
;;;154                        // Only stall if this isn't the last transfer
;;;155                        USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
;;;156                    }
;;;157                }
;;;158            }
;;;159    
;;;160            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
;;;161            USBD_MSC_SetCSW();
;;;162            return (__FALSE);
;;;163        }
;;;164    
;;;165        return (__TRUE);
00000a  2001              MOVS     r0,#1
;;;166    }
00000c  bd10              POP      {r4,pc}
                  |L4.14|
00000e  4811              LDR      r0,|L4.84|
000010  f7fffffe          BL       __aeabi_uread4
000014  b1a0              CBZ      r0,|L4.64|
000016  480f              LDR      r0,|L4.84|
000018  3808              SUBS     r0,r0,#8              ;150
00001a  7b00              LDRB     r0,[r0,#0xc]          ;150  ; USBD_MSC_CBW
00001c  0600              LSLS     r0,r0,#24             ;150
00001e  d504              BPL      |L4.42|
000020  480d              LDR      r0,|L4.88|
000022  7800              LDRB     r0,[r0,#0]            ;151  ; usbd_msc_ep_bulkin
000024  f0400080          ORR      r0,r0,#0x80           ;151
000028  e008              B        |L4.60|
                  |L4.42|
00002a  480a              LDR      r0,|L4.84|
00002c  301f              ADDS     r0,r0,#0x1f           ;153
00002e  f7fffffe          BL       __aeabi_uread4
000032  6b21              LDR      r1,[r4,#0x30]         ;153  ; BulkLen
000034  4288              CMP      r0,r1                 ;153
000036  d003              BEQ      |L4.64|
000038  4808              LDR      r0,|L4.92|
00003a  7800              LDRB     r0,[r0,#0]            ;155  ; usbd_msc_ep_bulkout
                  |L4.60|
00003c  f7fffffe          BL       USBD_MSC_SetStallEP
                  |L4.64|
000040  4904              LDR      r1,|L4.84|
000042  2001              MOVS     r0,#1                 ;160
000044  3117              ADDS     r1,r1,#0x17           ;160
000046  7308              STRB     r0,[r1,#0xc]          ;160
000048  f7fffffe          BL       USBD_MSC_SetCSW
00004c  2000              MOVS     r0,#0                 ;162
00004e  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L4.80|
                          DCD      ||.data||
                  |L4.84|
                          DCD      ||.bss||+0x8
                  |L4.88|
                          DCD      usbd_msc_ep_bulkin
                  |L4.92|
                          DCD      usbd_msc_ep_bulkout

                          AREA ||i.USBD_MSC_ClrStallEP||, CODE, READONLY, ALIGN=2

                  USBD_MSC_ClrStallEP PROC
;;;92     
;;;93     void USBD_MSC_ClrStallEP(U32 EPNum)        /* clear EP halt status according stall status */
000000  4813              LDR      r0,|L5.80|
;;;94     {
000002  b510              PUSH     {r4,lr}
;;;95         U32 n, m;
;;;96         n = USBD_SetupPacket.wIndexL & 0x8F;
000004  7900              LDRB     r0,[r0,#4]  ; USBD_SetupPacket
000006  f000018f          AND      r1,r0,#0x8f
;;;97         m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
00000a  0608              LSLS     r0,r1,#24
00000c  d505              BPL      |L5.26|
00000e  f001000f          AND      r0,r1,#0xf
000012  f44f3280          MOV      r2,#0x10000
000016  4082              LSLS     r2,r2,r0
000018  e001              B        |L5.30|
                  |L5.26|
00001a  2201              MOVS     r2,#1
00001c  408a              LSLS     r2,r2,r1
                  |L5.30|
;;;98     
;;;99         if ((n == (usbd_msc_ep_bulkin | 0x80)) && ((USBD_EndPointHalt & m) != 0)) {
00001e  480d              LDR      r0,|L5.84|
000020  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkin
000022  f0400480          ORR      r4,r0,#0x80
000026  428c              CMP      r4,r1
000028  d110              BNE      |L5.76|
00002a  480b              LDR      r0,|L5.88|
00002c  6800              LDR      r0,[r0,#0]  ; USBD_EndPointHalt
00002e  4210              TST      r0,r2
000030  d00c              BEQ      |L5.76|
;;;100            /* Compliance Test: rewrite CSW after unstall */
;;;101            if (USBD_MSC_CSW.dSignature == MSC_CSW_Signature) {
000032  480a              LDR      r0,|L5.92|
000034  f7fffffe          BL       __aeabi_uread4
000038  4909              LDR      r1,|L5.96|
00003a  4288              CMP      r0,r1
00003c  d106              BNE      |L5.76|
;;;102                USBD_WriteEP((usbd_msc_ep_bulkin | 0x80), (U8 *)&USBD_MSC_CSW, sizeof(USBD_MSC_CSW));
00003e  4620              MOV      r0,r4
000040  e8bd4010          POP      {r4,lr}
000044  220d              MOVS     r2,#0xd
000046  4905              LDR      r1,|L5.92|
000048  f7ffbffe          B.W      USBD_WriteEP
                  |L5.76|
;;;103            }
;;;104        }
;;;105    }
00004c  bd10              POP      {r4,pc}
;;;106    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      USBD_SetupPacket
                  |L5.84|
                          DCD      usbd_msc_ep_bulkin
                  |L5.88|
                          DCD      USBD_EndPointHalt
                  |L5.92|
                          DCD      ||.bss||+0x1f
                  |L5.96|
                          DCD      0x53425355

                          AREA ||i.USBD_MSC_DataInFormat||, CODE, READONLY, ALIGN=2

                  USBD_MSC_DataInFormat PROC
;;;431    
;;;432    BOOL USBD_MSC_DataInFormat(void)
000000  b570              PUSH     {r4-r6,lr}
;;;433    {
;;;434        if (USBD_MSC_CBW.dDataLength == 0) {
000002  480b              LDR      r0,|L6.48|
000004  f7fffffe          BL       __aeabi_uread4
;;;435            USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
000008  4c09              LDR      r4,|L6.48|
00000a  2502              MOVS     r5,#2
00000c  3417              ADDS     r4,r4,#0x17
00000e  b140              CBZ      r0,|L6.34|
;;;436            USBD_MSC_SetCSW();
;;;437            return (__FALSE);
;;;438        }
;;;439    
;;;440        if ((USBD_MSC_CBW.bmFlags & 0x80) == 0) {
000010  f1a4001f          SUB      r0,r4,#0x1f
000014  7b00              LDRB     r0,[r0,#0xc]  ; USBD_MSC_CBW
000016  0600              LSLS     r0,r0,#24
000018  d408              BMI      |L6.44|
;;;441            USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
00001a  4806              LDR      r0,|L6.52|
00001c  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkout
00001e  f7fffffe          BL       USBD_MSC_SetStallEP
                  |L6.34|
000022  7325              STRB     r5,[r4,#0xc]          ;435
000024  f7fffffe          BL       USBD_MSC_SetCSW
000028  2000              MOVS     r0,#0                 ;437
;;;442            USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
;;;443            USBD_MSC_SetCSW();
;;;444            return (__FALSE);
;;;445        }
;;;446    
;;;447        return (__TRUE);
;;;448    }
00002a  bd70              POP      {r4-r6,pc}
                  |L6.44|
00002c  2001              MOVS     r0,#1                 ;447
00002e  bd70              POP      {r4-r6,pc}
;;;449    
                          ENDP

                  |L6.48|
                          DCD      ||.bss||+0x8
                  |L6.52|
                          DCD      usbd_msc_ep_bulkout

                          AREA ||i.USBD_MSC_DataInTransfer||, CODE, READONLY, ALIGN=2

                  USBD_MSC_DataInTransfer PROC
;;;456    
;;;457    void USBD_MSC_DataInTransfer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;458    {
;;;459        if (BulkLen >= USBD_MSC_CBW.dDataLength) {
000002  4811              LDR      r0,|L7.72|
000004  f7fffffe          BL       __aeabi_uread4
000008  4c10              LDR      r4,|L7.76|
00000a  6b21              LDR      r1,[r4,#0x30]  ; BulkLen
00000c  4288              CMP      r0,r1
00000e  d802              BHI      |L7.22|
;;;460            BulkLen = USBD_MSC_CBW.dDataLength;
;;;461            BulkStage = MSC_BS_DATA_IN_LAST;
000010  6320              STR      r0,[r4,#0x30]  ; BulkLen
000012  2003              MOVS     r0,#3
000014  e000              B        |L7.24|
                  |L7.22|
;;;462        } else {
;;;463            BulkStage = MSC_BS_DATA_IN_LAST_STALL; /* short or zero packet */
000016  2004              MOVS     r0,#4
                  |L7.24|
000018  7020              STRB     r0,[r4,#0]
;;;464        }
;;;465    
;;;466        USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, USBD_MSC_BulkBuf, BulkLen);
00001a  480d              LDR      r0,|L7.80|
00001c  490d              LDR      r1,|L7.84|
00001e  6b22              LDR      r2,[r4,#0x30]  ; BulkLen
000020  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkin
000022  f0400080          ORR      r0,r0,#0x80
000026  f7fffffe          BL       USBD_WriteEP
;;;467        USBD_MSC_CSW.dDataResidue -= BulkLen;
00002a  4807              LDR      r0,|L7.72|
00002c  301f              ADDS     r0,r0,#0x1f
00002e  4605              MOV      r5,r0
000030  f7fffffe          BL       __aeabi_uread4
000034  6b21              LDR      r1,[r4,#0x30]  ; BulkLen
000036  1a40              SUBS     r0,r0,r1
000038  4629              MOV      r1,r5
00003a  f7fffffe          BL       __aeabi_uwrite4
;;;468        USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
00003e  4902              LDR      r1,|L7.72|
000040  2000              MOVS     r0,#0
000042  3117              ADDS     r1,r1,#0x17
000044  7308              STRB     r0,[r1,#0xc]
;;;469    }
000046  bd70              POP      {r4-r6,pc}
;;;470    
                          ENDP

                  |L7.72|
                          DCD      ||.bss||+0x8
                  |L7.76|
                          DCD      ||.data||
                  |L7.80|
                          DCD      usbd_msc_ep_bulkin
                  |L7.84|
                          DCD      USBD_MSC_BulkBuf

                          AREA ||i.USBD_MSC_EP_BULKIN_Event||, CODE, READONLY, ALIGN=1

                  USBD_MSC_EP_BULKIN_Event PROC
;;;1126   
;;;1127   void USBD_MSC_EP_BULKIN_Event(U32 event)
000000  f7ffbffe          B.W      USBD_MSC_BulkIn
;;;1128   {
;;;1129       USBD_MSC_BulkIn();
;;;1130   }
;;;1131   
                          ENDP


                          AREA ||i.USBD_MSC_EP_BULKOUT_Event||, CODE, READONLY, ALIGN=2

                  USBD_MSC_EP_BULKOUT_Event PROC
;;;1138   
;;;1139   void USBD_MSC_EP_BULKOUT_Event(U32 event)
000000  4806              LDR      r0,|L9.28|
;;;1140   {
000002  b510              PUSH     {r4,lr}
;;;1141       BulkLen = USBD_ReadEP(usbd_msc_ep_bulkout, USBD_MSC_BulkBuf, USBD_MSC_BulkBufSize);
000004  8802              LDRH     r2,[r0,#0]  ; USBD_MSC_BulkBufSize
000006  4807              LDR      r0,|L9.36|
000008  4905              LDR      r1,|L9.32|
00000a  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkout
00000c  f7fffffe          BL       USBD_ReadEP
000010  4905              LDR      r1,|L9.40|
;;;1142       USBD_MSC_BulkOut();
000012  6308              STR      r0,[r1,#0x30]  ; BulkLen
000014  e8bd4010          POP      {r4,lr}
000018  f7ffbffe          B.W      USBD_MSC_BulkOut
;;;1143   }
;;;1144   
                          ENDP

                  |L9.28|
                          DCD      USBD_MSC_BulkBufSize
                  |L9.32|
                          DCD      USBD_MSC_BulkBuf
                  |L9.36|
                          DCD      usbd_msc_ep_bulkout
                  |L9.40|
                          DCD      ||.data||

                          AREA ||i.USBD_MSC_EP_BULK_Event||, CODE, READONLY, ALIGN=1

                  USBD_MSC_EP_BULK_Event PROC
;;;1153   
;;;1154   void USBD_MSC_EP_BULK_Event(U32 event)
000000  b510              PUSH     {r4,lr}
;;;1155   {
000002  4604              MOV      r4,r0
;;;1156       if (event & USBD_EVT_OUT) {
000004  0740              LSLS     r0,r0,#29
000006  d502              BPL      |L10.14|
;;;1157           USBD_MSC_EP_BULKOUT_Event(0);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       USBD_MSC_EP_BULKOUT_Event
                  |L10.14|
;;;1158       }
;;;1159   
;;;1160       if (event & USBD_EVT_IN) {
00000e  0720              LSLS     r0,r4,#28
000010  d503              BPL      |L10.26|
000012  e8bd4010          POP      {r4,lr}
000016  f7ffbffe          B.W      USBD_MSC_BulkIn
                  |L10.26|
;;;1161           USBD_MSC_EP_BULKIN_Event(0);
;;;1162       }
;;;1163   }
00001a  bd10              POP      {r4,pc}
;;;1164   
                          ENDP


                          AREA ||i.USBD_MSC_GetCBW||, CODE, READONLY, ALIGN=2

                  USBD_MSC_GetCBW PROC
;;;849    
;;;850    void USBD_MSC_GetCBW(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;851    {
;;;852        U32 n;
;;;853        U32 copy_size;
;;;854        copy_size = MIN(BulkLen, sizeof(USBD_MSC_CBW));
000004  4e7a              LDR      r6,|L11.496|
000006  6b32              LDR      r2,[r6,#0x30]  ; BulkLen
000008  2a1f              CMP      r2,#0x1f
00000a  d201              BCS      |L11.16|
00000c  4613              MOV      r3,r2                 ;851
00000e  e000              B        |L11.18|
                  |L11.16|
000010  231f              MOVS     r3,#0x1f
                  |L11.18|
;;;855    
;;;856        for (n = 0; n < copy_size; n++) {
000012  2000              MOVS     r0,#0
;;;857            *((U8 *)&USBD_MSC_CBW + n) = USBD_MSC_BulkBuf[n];
000014  4d77              LDR      r5,|L11.500|
000016  4978              LDR      r1,|L11.504|
000018  e002              B        |L11.32|
                  |L11.26|
00001a  5c0c              LDRB     r4,[r1,r0]
00001c  542c              STRB     r4,[r5,r0]
00001e  1c40              ADDS     r0,r0,#1
                  |L11.32|
000020  4298              CMP      r0,r3                 ;856
000022  d3fa              BCC      |L11.26|
;;;858        }
;;;859    
;;;860        if ((BulkLen == sizeof(USBD_MSC_CBW)) && (USBD_MSC_CBW.dSignature == MSC_CBW_Signature)) {
;;;861            /* Valid USBD_MSC_CBW */
;;;862            USBD_MSC_CSW.dTag = USBD_MSC_CBW.dTag;
;;;863            USBD_MSC_CSW.dDataResidue = USBD_MSC_CBW.dDataLength;
;;;864    
;;;865            if ((USBD_MSC_CBW.bLUN      >  0) ||
;;;866                    (USBD_MSC_CBW.bCBLength <  1) ||
;;;867                    (USBD_MSC_CBW.bCBLength > 16)) {
;;;868    fail:
;;;869                USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
;;;870                USBD_MSC_SetCSW();
;;;871            } else {
;;;872                switch (USBD_MSC_CBW.CB[0]) {
;;;873                    case SCSI_TEST_UNIT_READY:
;;;874                        USBD_MSC_TestUnitReady();
;;;875                        break;
;;;876    
;;;877                    case SCSI_REQUEST_SENSE:
;;;878                        USBD_MSC_RequestSense();
;;;879                        break;
;;;880    
;;;881                    case SCSI_FORMAT_UNIT:
;;;882                        goto fail;
;;;883    
;;;884                    case SCSI_INQUIRY:
;;;885                        USBD_MSC_Inquiry();
;;;886                        break;
;;;887    
;;;888                    case SCSI_START_STOP_UNIT:
;;;889                        USBD_MSC_StartStopUnit();
;;;890                        break;
;;;891    
;;;892                    case SCSI_MEDIA_REMOVAL:
;;;893                        USBD_MSC_MediaRemoval();
;;;894                        break;
;;;895    
;;;896                    case SCSI_MODE_SELECT6:
;;;897                        goto fail;
;;;898    
;;;899                    case SCSI_MODE_SENSE6:
;;;900                        USBD_MSC_ModeSense6();
;;;901                        break;
;;;902    
;;;903                    case SCSI_MODE_SELECT10:
;;;904                        goto fail;
;;;905    
;;;906                    case SCSI_MODE_SENSE10:
;;;907                        USBD_MSC_ModeSense10();
;;;908                        break;
;;;909    
;;;910                    case SCSI_READ_FORMAT_CAPACITIES:
;;;911                        USBD_MSC_ReadFormatCapacity();
;;;912                        break;
;;;913    
;;;914                    case SCSI_READ_CAPACITY:
;;;915                        USBD_MSC_ReadCapacity();
;;;916                        break;
;;;917    
;;;918                    case SCSI_ATA_COMMAND_PASS_THROUGH12:
;;;919                        USBD_MSC_ATAPassThrough();
;;;920                        break;
;;;921    
;;;922                    case SCSI_SERVICE_ACTION_IN16:
;;;923                        USBD_MSC_ServiceActionIn16();
;;;924                        break;
;;;925    
;;;926                    case SCSI_READ10:
;;;927                    case SCSI_READ12:
;;;928                        if (USBD_MSC_RWSetup()) {
;;;929                            if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {
;;;930                                BulkStage = MSC_BS_DATA_IN;
;;;931                                USBD_MSC_MemoryRead();
;;;932                            } else {                       /* direction mismatch */
;;;933                                USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
;;;934                                USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
;;;935                                USBD_MSC_SetCSW();
;;;936                            }
;;;937                        }
;;;938    
;;;939                        break;
;;;940    
;;;941                    case SCSI_WRITE10:
;;;942                    case SCSI_WRITE12:
;;;943                        if (USBD_MSC_RWSetup()) {
;;;944                            if ((USBD_MSC_CBW.bmFlags & 0x80) == 0) {
;;;945                                BulkStage = MSC_BS_DATA_OUT;
;;;946                            } else {                       /* direction mismatch */
;;;947                                USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
000024  f8df81d8          LDR      r8,|L11.512|
000028  2701              MOVS     r7,#1                 ;869
00002a  f8dfa1d0          LDR      r10,|L11.508|
00002e  f8980000          LDRB     r0,[r8,#0]
000032  2a1f              CMP      r2,#0x1f              ;860
000034  f0400b80          ORR      r11,r0,#0x80
000038  d169              BNE      |L11.270|
00003a  486e              LDR      r0,|L11.500|
00003c  f7fffffe          BL       __aeabi_uread4
000040  4970              LDR      r1,|L11.516|
000042  4288              CMP      r0,r1                 ;860
000044  d163              BNE      |L11.270|
000046  1d28              ADDS     r0,r5,#4              ;862
000048  f7fffffe          BL       __aeabi_uread4
00004c  4c69              LDR      r4,|L11.500|
00004e  341f              ADDS     r4,r4,#0x1f           ;862
000050  1d21              ADDS     r1,r4,#4              ;862
000052  f7fffffe          BL       __aeabi_uwrite4
000056  f1a40017          SUB      r0,r4,#0x17           ;863
00005a  f7fffffe          BL       __aeabi_uread4
00005e  f1040108          ADD      r1,r4,#8              ;863
000062  f7fffffe          BL       __aeabi_uwrite4
000066  7b68              LDRB     r0,[r5,#0xd]          ;865  ; USBD_MSC_CBW
000068  b918              CBNZ     r0,|L11.114|
00006a  7ba8              LDRB     r0,[r5,#0xe]          ;866  ; USBD_MSC_CBW
00006c  b108              CBZ      r0,|L11.114|
00006e  2810              CMP      r0,#0x10              ;867
000070  d901              BLS      |L11.118|
                  |L11.114|
000072  7327              STRB     r7,[r4,#0xc]          ;869
000074  e089              B        |L11.394|
                  |L11.118|
000076  7be8              LDRB     r0,[r5,#0xf]          ;872  ; USBD_MSC_CBW
000078  f04f0902          MOV      r9,#2                 ;930
00007c  282a              CMP      r0,#0x2a              ;872
00007e  d03e              BEQ      |L11.254|
000080  dc22              BGT      |L11.200|
000082  281a              CMP      r0,#0x1a              ;872
000084  d050              BEQ      |L11.296|
000086  dc0f              BGT      |L11.168|
000088  2804              CMP      r0,#4                 ;872
00008a  d0f2              BEQ      |L11.114|
00008c  dc06              BGT      |L11.156|
00008e  b3e8              CBZ      r0,|L11.268|
000090  2803              CMP      r0,#3                 ;872
000092  d1ee              BNE      |L11.114|
000094  e8bd5ff0          POP      {r4-r12,lr}           ;878
000098  f7ffbffe          B.W      USBD_MSC_RequestSense
                  |L11.156|
00009c  2812              CMP      r0,#0x12              ;872
00009e  d1e8              BNE      |L11.114|
0000a0  e8bd5ff0          POP      {r4-r12,lr}           ;885
0000a4  f7ffbffe          B.W      USBD_MSC_Inquiry
                  |L11.168|
0000a8  2823              CMP      r0,#0x23              ;872
0000aa  d045              BEQ      |L11.312|
0000ac  dc07              BGT      |L11.190|
0000ae  281b              CMP      r0,#0x1b              ;872
0000b0  d036              BEQ      |L11.288|
0000b2  281e              CMP      r0,#0x1e              ;872
0000b4  d1dd              BNE      |L11.114|
0000b6  e8bd5ff0          POP      {r4-r12,lr}           ;893
0000ba  f7ffbffe          B.W      USBD_MSC_MediaRemoval
                  |L11.190|
0000be  2825              CMP      r0,#0x25              ;872
0000c0  d03e              BEQ      |L11.320|
0000c2  2828              CMP      r0,#0x28              ;872
0000c4  d1d5              BNE      |L11.114|
0000c6  e047              B        |L11.344|
                  |L11.200|
0000c8  289e              CMP      r0,#0x9e              ;872
0000ca  d041              BEQ      |L11.336|
0000cc  dc0f              BGT      |L11.238|
0000ce  2855              CMP      r0,#0x55              ;872
0000d0  d0cf              BEQ      |L11.114|
0000d2  dc04              BGT      |L11.222|
0000d4  282f              CMP      r0,#0x2f              ;872
0000d6  d053              BEQ      |L11.384|
0000d8  2835              CMP      r0,#0x35              ;872
0000da  d1ca              BNE      |L11.114|
0000dc  e003              B        |L11.230|
                  |L11.222|
0000de  285a              CMP      r0,#0x5a              ;872
0000e0  d026              BEQ      |L11.304|
0000e2  2891              CMP      r0,#0x91              ;872
0000e4  d1c5              BNE      |L11.114|
                  |L11.230|
;;;948                                USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
;;;949                                USBD_MSC_SetCSW();
;;;950                            }
;;;951                        }
;;;952    
;;;953                        break;
;;;954    
;;;955                    case SCSI_VERIFY10:
;;;956                        if ((USBD_MSC_CBW.CB[1] & 0x02) == 0) {
;;;957                            // BYTCHK = 0 -> CRC Check (not implemented)
;;;958                            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
;;;959                            USBD_MSC_SetCSW();
;;;960                            break;
;;;961                        }
;;;962    
;;;963                        if (USBD_MSC_RWSetup()) {
;;;964                            if ((USBD_MSC_CBW.bmFlags & 0x80) == 0) {
;;;965                                BulkStage = MSC_BS_DATA_OUT;
;;;966                                MemOK = __TRUE;
;;;967                            } else {
;;;968                                USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
;;;969                                USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
;;;970                                USBD_MSC_SetCSW();
;;;971                            }
;;;972                        }
;;;973    
;;;974                        break;
;;;975    
;;;976                    case SCSI_SYNC_CACHE10:
;;;977                    case SCSI_SYNC_CACHE16:
;;;978                        USBD_MSC_SynchronizeCache();
0000e6  e8bd5ff0          POP      {r4-r12,lr}
0000ea  f7ffbffe          B.W      USBD_MSC_SynchronizeCache
                  |L11.238|
0000ee  28a1              CMP      r0,#0xa1              ;872
0000f0  d02a              BEQ      |L11.328|
0000f2  28a3              CMP      r0,#0xa3              ;872
0000f4  d05c              BEQ      |L11.432|
0000f6  28a8              CMP      r0,#0xa8              ;872
0000f8  d02e              BEQ      |L11.344|
0000fa  28aa              CMP      r0,#0xaa              ;872
0000fc  d1b9              BNE      |L11.114|
                  |L11.254|
0000fe  f7fffffe          BL       USBD_MSC_RWSetup
000102  2800              CMP      r0,#0                 ;943
000104  d006              BEQ      |L11.276|
000106  7b28              LDRB     r0,[r5,#0xc]          ;944  ; USBD_MSC_CBW
000108  0600              LSLS     r0,r0,#24             ;944
00010a  e001              B        |L11.272|
                  |L11.268|
00010c  e004              B        |L11.280|
                  |L11.270|
00010e  e053              B        |L11.440|
                  |L11.272|
000110  d449              BMI      |L11.422|
000112  7037              STRB     r7,[r6,#0]            ;945
                  |L11.276|
;;;979                        break;
;;;980    
;;;981                    case SCSI_REPORT_ID_INFO:
;;;982                        USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
;;;983                        goto fail;
;;;984    
;;;985                    default:
;;;986                        goto fail;
;;;987                }
;;;988            }
;;;989        } else {
;;;990            /* Invalid USBD_MSC_CBW */
;;;991            USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
;;;992            /* set EP to stay stalled */
;;;993            USBD_EndPointStall |= ((1 << 16) << (usbd_msc_ep_bulkin & 0x0F));
;;;994            USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
;;;995            /* set EP to stay stalled */
;;;996            USBD_EndPointStall |=  1 << usbd_msc_ep_bulkout;
;;;997            BulkStage = MSC_BS_ERROR;
;;;998        }
;;;999    }
000114  e8bd9ff0          POP      {r4-r12,pc}
                  |L11.280|
000118  e8bd5ff0          POP      {r4-r12,lr}           ;874
00011c  f7ffbffe          B.W      USBD_MSC_TestUnitReady
                  |L11.288|
000120  e8bd5ff0          POP      {r4-r12,lr}           ;889
000124  f7ffbffe          B.W      USBD_MSC_StartStopUnit
                  |L11.296|
000128  e8bd5ff0          POP      {r4-r12,lr}           ;900
00012c  f7ffbffe          B.W      USBD_MSC_ModeSense6
                  |L11.304|
000130  e8bd5ff0          POP      {r4-r12,lr}           ;907
000134  f7ffbffe          B.W      USBD_MSC_ModeSense10
                  |L11.312|
000138  e8bd5ff0          POP      {r4-r12,lr}           ;911
00013c  f7ffbffe          B.W      USBD_MSC_ReadFormatCapacity
                  |L11.320|
000140  e8bd5ff0          POP      {r4-r12,lr}           ;915
000144  f7ffbffe          B.W      USBD_MSC_ReadCapacity
                  |L11.328|
000148  e8bd5ff0          POP      {r4-r12,lr}           ;919
00014c  f7ffbffe          B.W      USBD_MSC_ATAPassThrough
                  |L11.336|
000150  e8bd5ff0          POP      {r4-r12,lr}           ;923
000154  f7ffbffe          B.W      USBD_MSC_ServiceActionIn16
                  |L11.344|
000158  f7fffffe          BL       USBD_MSC_RWSetup
00015c  2800              CMP      r0,#0                 ;928
00015e  d0d9              BEQ      |L11.276|
000160  7b28              LDRB     r0,[r5,#0xc]          ;929  ; USBD_MSC_CBW
000162  0600              LSLS     r0,r0,#24             ;929
000164  d505              BPL      |L11.370|
000166  f8869000          STRB     r9,[r6,#0]            ;930
00016a  e8bd5ff0          POP      {r4-r12,lr}           ;931
00016e  f7ffbffe          B.W      USBD_MSC_MemoryRead
                  |L11.370|
000172  f89a0000          LDRB     r0,[r10,#0]           ;933  ; usbd_msc_ep_bulkout
                  |L11.374|
000176  f7fffffe          BL       USBD_MSC_SetStallEP
00017a  f884900c          STRB     r9,[r4,#0xc]          ;934
00017e  e004              B        |L11.394|
                  |L11.384|
000180  7c28              LDRB     r0,[r5,#0x10]         ;956  ; USBD_MSC_CBW
000182  0780              LSLS     r0,r0,#30             ;956
000184  d405              BMI      |L11.402|
000186  2000              MOVS     r0,#0                 ;958
000188  7320              STRB     r0,[r4,#0xc]          ;958
                  |L11.394|
00018a  e8bd5ff0          POP      {r4-r12,lr}           ;970
00018e  f7ffbffe          B.W      USBD_MSC_SetCSW
                  |L11.402|
000192  f7fffffe          BL       USBD_MSC_RWSetup
000196  2800              CMP      r0,#0                 ;963
000198  d0bc              BEQ      |L11.276|
00019a  7b28              LDRB     r0,[r5,#0xc]          ;964  ; USBD_MSC_CBW
00019c  0600              LSLS     r0,r0,#24             ;964
00019e  d402              BMI      |L11.422|
0001a0  7037              STRB     r7,[r6,#0]            ;965
0001a2  6237              STR      r7,[r6,#0x20]         ;966  ; MemOK
0001a4  e7b6              B        |L11.276|
                  |L11.422|
0001a6  f8980000          LDRB     r0,[r8,#0]            ;968  ; usbd_msc_ep_bulkin
0001aa  f0400080          ORR      r0,r0,#0x80           ;968
0001ae  e7e2              B        |L11.374|
                  |L11.432|
0001b0  4658              MOV      r0,r11                ;970
0001b2  f7fffffe          BL       USBD_MSC_SetStallEP
0001b6  e75c              B        |L11.114|
                  |L11.440|
0001b8  4644              MOV      r4,r8                 ;991
0001ba  4658              MOV      r0,r11                ;991
0001bc  f7fffffe          BL       USBD_MSC_SetStallEP
0001c0  7820              LDRB     r0,[r4,#0]            ;993  ; usbd_msc_ep_bulkin
0001c2  4c11              LDR      r4,|L11.520|
0001c4  f000010f          AND      r1,r0,#0xf            ;993
0001c8  f44f3080          MOV      r0,#0x10000           ;993
0001cc  4088              LSLS     r0,r0,r1              ;993
0001ce  6821              LDR      r1,[r4,#0]            ;993  ; USBD_EndPointStall
0001d0  4655              MOV      r5,r10                ;994
0001d2  4308              ORRS     r0,r0,r1              ;993
0001d4  6020              STR      r0,[r4,#0]            ;994  ; USBD_EndPointStall
0001d6  f89a0000          LDRB     r0,[r10,#0]           ;994  ; usbd_msc_ep_bulkout
0001da  f7fffffe          BL       USBD_MSC_SetStallEP
0001de  7828              LDRB     r0,[r5,#0]            ;996  ; usbd_msc_ep_bulkout
0001e0  4087              LSLS     r7,r7,r0              ;996
0001e2  6820              LDR      r0,[r4,#0]            ;996  ; USBD_EndPointStall
0001e4  4307              ORRS     r7,r7,r0              ;996
0001e6  2006              MOVS     r0,#6                 ;997
0001e8  6027              STR      r7,[r4,#0]            ;997  ; USBD_EndPointStall
0001ea  7030              STRB     r0,[r6,#0]            ;997
0001ec  e792              B        |L11.276|
;;;1000   
                          ENDP

0001ee  0000              DCW      0x0000
                  |L11.496|
                          DCD      ||.data||
                  |L11.500|
                          DCD      ||.bss||
                  |L11.504|
                          DCD      USBD_MSC_BulkBuf
                  |L11.508|
                          DCD      usbd_msc_ep_bulkout
                  |L11.512|
                          DCD      usbd_msc_ep_bulkin
                  |L11.516|
                          DCD      0x43425355
                  |L11.520|
                          DCD      USBD_EndPointStall

                          AREA ||i.USBD_MSC_GetMaxLUN||, CODE, READONLY, ALIGN=2

                  USBD_MSC_GetMaxLUN PROC
;;;130    
;;;131    BOOL USBD_MSC_GetMaxLUN(void)
000000  4902              LDR      r1,|L12.12|
;;;132    {
;;;133        USBD_EP0Buf[0] = 0;                      /* one LUN associated with this device */
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;134        return (__TRUE);
000006  2001              MOVS     r0,#1
;;;135    }
000008  4770              BX       lr
;;;136    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      USBD_EP0Buf

                          AREA ||i.USBD_MSC_Inquiry||, CODE, READONLY, ALIGN=2

                  USBD_MSC_Inquiry PROC
;;;560    
;;;561    void USBD_MSC_Inquiry(void)
000000  b510              PUSH     {r4,lr}
;;;562    {
;;;563        U8  i;
;;;564        U8 *ptr_str;
;;;565    
;;;566        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d020              BEQ      |L13.76|
;;;567            return;
;;;568        }
;;;569    
;;;570        USBD_MSC_BulkBuf[ 0] = 0x00;             /* Direct Access Device */
00000a  4b11              LDR      r3,|L13.80|
00000c  2000              MOVS     r0,#0
;;;571        USBD_MSC_BulkBuf[ 1] = 0x80;             /* RMB = 1: Removable Medium */
00000e  2180              MOVS     r1,#0x80
000010  7018              STRB     r0,[r3,#0]            ;570
000012  7059              STRB     r1,[r3,#1]
;;;572        USBD_MSC_BulkBuf[ 2] = 0x02;             /* Version: ANSI X3.131: 1994 */
000014  2102              MOVS     r1,#2
000016  7099              STRB     r1,[r3,#2]
;;;573        USBD_MSC_BulkBuf[ 3] = 0x02;
000018  70d9              STRB     r1,[r3,#3]
;;;574        USBD_MSC_BulkBuf[ 4] = 36 - 4;           /* Additional Length */
00001a  2420              MOVS     r4,#0x20
00001c  711c              STRB     r4,[r3,#4]
;;;575        USBD_MSC_BulkBuf[ 5] = 0x00;             /* SCCS = 0: No Storage Controller Component */
00001e  7158              STRB     r0,[r3,#5]
;;;576        USBD_MSC_BulkBuf[ 6] = 0x00;
000020  7198              STRB     r0,[r3,#6]
;;;577        USBD_MSC_BulkBuf[ 7] = 0x00;
000022  71d8              STRB     r0,[r3,#7]
;;;578        ptr_str = (U8 *)usbd_msc_inquiry_data;
000024  480b              LDR      r0,|L13.84|
;;;579    
;;;580        for (i = 8; i < 36; i++) {               /* Product Information    + */
000026  6801              LDR      r1,[r0,#0]  ; usbd_msc_inquiry_data
000028  2008              MOVS     r0,#8
                  |L13.42|
;;;581            if (*ptr_str) {                        /* Product Revision Level   */
00002a  780a              LDRB     r2,[r1,#0]
00002c  b112              CBZ      r2,|L13.52|
;;;582                USBD_MSC_BulkBuf[i] = *ptr_str++;
00002e  541a              STRB     r2,[r3,r0]
000030  1c49              ADDS     r1,r1,#1
000032  e000              B        |L13.54|
                  |L13.52|
;;;583            } else {
;;;584                USBD_MSC_BulkBuf[i] = ' ';
000034  541c              STRB     r4,[r3,r0]
                  |L13.54|
000036  1c40              ADDS     r0,r0,#1
000038  b2c0              UXTB     r0,r0                 ;580
00003a  2824              CMP      r0,#0x24              ;580
00003c  d3f5              BCC      |L13.42|
;;;585            }
;;;586        }
;;;587    
;;;588        BulkLen = 36;
00003e  4906              LDR      r1,|L13.88|
000040  2024              MOVS     r0,#0x24
;;;589        USBD_MSC_DataInTransfer();
000042  6308              STR      r0,[r1,#0x30]  ; BulkLen
000044  e8bd4010          POP      {r4,lr}
000048  f7ffbffe          B.W      USBD_MSC_DataInTransfer
                  |L13.76|
;;;590    }
00004c  bd10              POP      {r4,pc}
;;;591    
                          ENDP

00004e  0000              DCW      0x0000
                  |L13.80|
                          DCD      USBD_MSC_BulkBuf
                  |L13.84|
                          DCD      usbd_msc_inquiry_data
                  |L13.88|
                          DCD      ||.data||

                          AREA ||i.USBD_MSC_MediaRemoval||, CODE, READONLY, ALIGN=2

                  USBD_MSC_MediaRemoval PROC
;;;619    
;;;620    void USBD_MSC_MediaRemoval(void)
000000  4805              LDR      r0,|L14.24|
;;;621    {
;;;622        if (USBD_MSC_CBW.CB[4] & 1) {            /* If prevent */
000002  7cc0              LDRB     r0,[r0,#0x13]  ; USBD_MSC_CBW
000004  07c1              LSLS     r1,r0,#31
;;;623            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;    /* Prevent media removal -> fail */
000006  4804              LDR      r0,|L14.24|
000008  f100001f          ADD      r0,r0,#0x1f
00000c  d000              BEQ      |L14.16|
00000e  2101              MOVS     r1,#1
                  |L14.16|
;;;624        } else {                                 /* If allow */
;;;625            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;    /* Allow media removal -> pass */
000010  7301              STRB     r1,[r0,#0xc]
;;;626        }
;;;627    
;;;628        USBD_MSC_SetCSW();
000012  f7ffbffe          B.W      USBD_MSC_SetCSW
;;;629    }
;;;630    
                          ENDP

000016  0000              DCW      0x0000
                  |L14.24|
                          DCD      ||.bss||

                          AREA ||i.USBD_MSC_MemoryRead||, CODE, READONLY, ALIGN=2

                  USBD_MSC_MemoryRead PROC
;;;175    
;;;176    void USBD_MSC_MemoryRead(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;177    {
;;;178        U32 n, m;
;;;179    
;;;180        if (Block >= USBD_MSC_BlockCount) {
000004  4d30              LDR      r5,|L15.200|
;;;181            n = 0;
;;;182            USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
000006  4f31              LDR      r7,|L15.204|
;;;183            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
000008  f8df80c4          LDR      r8,|L15.208|
00000c  69a9              LDR      r1,[r5,#0x18]         ;180  ; USBD_MSC_BlockCount
00000e  6a68              LDR      r0,[r5,#0x24]         ;180  ; Block
000010  2600              MOVS     r6,#0
000012  4288              CMP      r0,r1                 ;180
000014  d30a              BCC      |L15.44|
000016  7838              LDRB     r0,[r7,#0]            ;182  ; usbd_msc_ep_bulkin
000018  2400              MOVS     r4,#0                 ;181
00001a  f0400080          ORR      r0,r0,#0x80           ;182
00001e  f7fffffe          BL       USBD_MSC_SetStallEP
000022  f888600c          STRB     r6,[r8,#0xc]
;;;184            USBD_MSC_SetCSW();
000026  f7fffffe          BL       USBD_MSC_SetCSW
00002a  e008              B        |L15.62|
                  |L15.44|
;;;185        } else {
;;;186            if (Length > usbd_msc_maxpacketsize[USBD_HighSpeed]) {
00002c  492a              LDR      r1,|L15.216|
00002e  4829              LDR      r0,|L15.212|
000030  7809              LDRB     r1,[r1,#0]  ; USBD_HighSpeed
000032  f8304011          LDRH     r4,[r0,r1,LSL #1]
000036  6ae8              LDR      r0,[r5,#0x2c]  ; Length
000038  4284              CMP      r4,r0
00003a  d300              BCC      |L15.62|
;;;187                n = usbd_msc_maxpacketsize[USBD_HighSpeed];
;;;188            } else {
;;;189                n = Length;
00003c  4604              MOV      r4,r0
                  |L15.62|
;;;190            }
;;;191        }
;;;192    
;;;193        if (!USBD_MSC_CheckMedia()) {
00003e  f7fffffe          BL       USBD_MSC_CheckMedia
000042  b900              CBNZ     r0,|L15.70|
;;;194            n = 0;
000044  2400              MOVS     r4,#0
                  |L15.70|
;;;195        }
;;;196    
;;;197        if ((Offset == 0) && (n != 0)) {
000046  6aa8              LDR      r0,[r5,#0x28]  ; Offset
000048  b368              CBZ      r0,|L15.166|
;;;198            m = (Length + (USBD_MSC_BlockSize - 1)) / USBD_MSC_BlockSize;
;;;199    
;;;200            if (m > USBD_MSC_BlockGroup) {
;;;201                m = USBD_MSC_BlockGroup;
;;;202            }
;;;203    
;;;204            usbd_msc_read_sect(Block, USBD_MSC_BlockBuf, m);
;;;205        }
;;;206    
;;;207        if (n) {
00004a  b174              CBZ      r4,|L15.106|
                  |L15.76|
;;;208            USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, &USBD_MSC_BlockBuf[Offset], n);
00004c  6aa9              LDR      r1,[r5,#0x28]  ; Offset
00004e  69e8              LDR      r0,[r5,#0x1c]  ; USBD_MSC_BlockBuf
000050  4622              MOV      r2,r4
000052  4401              ADD      r1,r1,r0
000054  7838              LDRB     r0,[r7,#0]  ; usbd_msc_ep_bulkin
000056  f0400080          ORR      r0,r0,#0x80
00005a  f7fffffe          BL       USBD_WriteEP
;;;209            Offset += n;
00005e  6aa8              LDR      r0,[r5,#0x28]  ; Offset
000060  4420              ADD      r0,r0,r4
;;;210            Length -= n;
000062  62a8              STR      r0,[r5,#0x28]  ; Offset
000064  6ae8              LDR      r0,[r5,#0x2c]  ; Length
000066  1b00              SUBS     r0,r0,r4
000068  62e8              STR      r0,[r5,#0x2c]  ; Length
                  |L15.106|
00006a  e9d51004          LDRD     r1,r0,[r5,#0x10]
;;;211        }
;;;212    
;;;213        if (Offset == USBD_MSC_BlockGroup * USBD_MSC_BlockSize) {
00006e  6aaa              LDR      r2,[r5,#0x28]  ; Offset
000070  4341              MULS     r1,r0,r1
000072  4291              CMP      r1,r2
000074  d103              BNE      |L15.126|
;;;214            Offset = 0;
;;;215            Block += USBD_MSC_BlockGroup;
000076  62ae              STR      r6,[r5,#0x28]  ; Offset
000078  6a69              LDR      r1,[r5,#0x24]  ; Block
00007a  4408              ADD      r0,r0,r1
00007c  6268              STR      r0,[r5,#0x24]  ; Block
                  |L15.126|
;;;216        }
;;;217    
;;;218        USBD_MSC_CSW.dDataResidue -= n;
00007e  4814              LDR      r0,|L15.208|
000080  3008              ADDS     r0,r0,#8
000082  4607              MOV      r7,r0
000084  f7fffffe          BL       __aeabi_uread4
000088  1b00              SUBS     r0,r0,r4
00008a  4639              MOV      r1,r7
00008c  f7fffffe          BL       __aeabi_uwrite4
;;;219    
;;;220        if (!n) {
000090  2c00              CMP      r4,#0
000092  d006              BEQ      |L15.162|
;;;221            return;
;;;222        }
;;;223    
;;;224        if (Length == 0) {
000094  6ae8              LDR      r0,[r5,#0x2c]  ; Length
000096  2800              CMP      r0,#0
000098  d103              BNE      |L15.162|
;;;225            BulkStage = MSC_BS_DATA_IN_LAST;
00009a  2003              MOVS     r0,#3
00009c  7028              STRB     r0,[r5,#0]
;;;226            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
00009e  f888600c          STRB     r6,[r8,#0xc]
                  |L15.162|
;;;227        }
;;;228    }
0000a2  e8bd81f0          POP      {r4-r8,pc}
                  |L15.166|
0000a6  2c00              CMP      r4,#0                 ;197
0000a8  d0df              BEQ      |L15.106|
0000aa  6ae9              LDR      r1,[r5,#0x2c]         ;198  ; Length
0000ac  6928              LDR      r0,[r5,#0x10]         ;198  ; USBD_MSC_BlockSize
0000ae  4401              ADD      r1,r1,r0              ;198
0000b0  1e49              SUBS     r1,r1,#1              ;198
0000b2  fbb1f2f0          UDIV     r2,r1,r0              ;198
0000b6  6968              LDR      r0,[r5,#0x14]         ;200  ; USBD_MSC_BlockGroup
0000b8  4282              CMP      r2,r0                 ;200
0000ba  d900              BLS      |L15.190|
0000bc  4602              MOV      r2,r0                 ;201
                  |L15.190|
0000be  69e9              LDR      r1,[r5,#0x1c]         ;204  ; USBD_MSC_BlockBuf
0000c0  6a68              LDR      r0,[r5,#0x24]         ;204  ; Block
0000c2  f7fffffe          BL       usbd_msc_read_sect
0000c6  e7c1              B        |L15.76|
;;;229    
                          ENDP

                  |L15.200|
                          DCD      ||.data||
                  |L15.204|
                          DCD      usbd_msc_ep_bulkin
                  |L15.208|
                          DCD      ||.bss||+0x1f
                  |L15.212|
                          DCD      usbd_msc_maxpacketsize
                  |L15.216|
                          DCD      USBD_HighSpeed

                          AREA ||i.USBD_MSC_MemoryVerify||, CODE, READONLY, ALIGN=2

                  USBD_MSC_MemoryVerify PROC
;;;303    
;;;304    void USBD_MSC_MemoryVerify(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;305    {
;;;306        U32 n;
;;;307    
;;;308        if (Block >= USBD_MSC_BlockCount) {
000004  4e32              LDR      r6,|L16.208|
;;;309            BulkLen = 0;
;;;310            USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
;;;311            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
000006  f8df80cc          LDR      r8,|L16.212|
00000a  2500              MOVS     r5,#0
00000c  69b1              LDR      r1,[r6,#0x18]         ;308  ; USBD_MSC_BlockCount
00000e  6a70              LDR      r0,[r6,#0x24]         ;308  ; Block
000010  4288              CMP      r0,r1                 ;308
000012  d308              BCC      |L16.38|
000014  4830              LDR      r0,|L16.216|
000016  6335              STR      r5,[r6,#0x30]         ;310  ; BulkLen
000018  7800              LDRB     r0,[r0,#0]            ;310  ; usbd_msc_ep_bulkout
00001a  f7fffffe          BL       USBD_MSC_SetStallEP
00001e  f888500c          STRB     r5,[r8,#0xc]
;;;312            USBD_MSC_SetCSW();
000022  f7fffffe          BL       USBD_MSC_SetCSW
                  |L16.38|
;;;313        }
;;;314    
;;;315        if (!USBD_MSC_CheckMedia()) {
000026  f7fffffe          BL       USBD_MSC_CheckMedia
00002a  b120              CBZ      r0,|L16.54|
;;;316            BulkLen = 0;
;;;317        }
;;;318    
;;;319        if (BulkLen) {
00002c  6b30              LDR      r0,[r6,#0x30]  ; BulkLen
00002e  b310              CBZ      r0,|L16.118|
;;;320            if ((Offset == 0) && (BulkLen != 0)) {
000030  6ab0              LDR      r0,[r6,#0x28]  ; Offset
000032  b110              CBZ      r0,|L16.58|
000034  e00f              B        |L16.86|
                  |L16.54|
000036  6335              STR      r5,[r6,#0x30]         ;316  ; BulkLen
000038  e01d              B        |L16.118|
                  |L16.58|
;;;321                n = (Length + (USBD_MSC_BlockSize - 1)) / USBD_MSC_BlockSize;
00003a  6af1              LDR      r1,[r6,#0x2c]  ; Length
00003c  6930              LDR      r0,[r6,#0x10]  ; USBD_MSC_BlockSize
00003e  4401              ADD      r1,r1,r0
000040  1e49              SUBS     r1,r1,#1
000042  fbb1f2f0          UDIV     r2,r1,r0
;;;322    
;;;323                if (n > USBD_MSC_BlockGroup) {
000046  6970              LDR      r0,[r6,#0x14]  ; USBD_MSC_BlockGroup
000048  4282              CMP      r2,r0
00004a  d900              BLS      |L16.78|
;;;324                    n = USBD_MSC_BlockGroup;
00004c  4602              MOV      r2,r0
                  |L16.78|
;;;325                }
;;;326    
;;;327                usbd_msc_read_sect(Block, USBD_MSC_BlockBuf, n);
00004e  69f1              LDR      r1,[r6,#0x1c]  ; USBD_MSC_BlockBuf
000050  6a70              LDR      r0,[r6,#0x24]  ; Block
000052  f7fffffe          BL       usbd_msc_read_sect
                  |L16.86|
;;;328            }
;;;329    
;;;330            for (n = 0; n < BulkLen; n++) {
000056  2000              MOVS     r0,#0
;;;331                if (USBD_MSC_BlockBuf[Offset + n] != USBD_MSC_BulkBuf[n]) {
000058  4a20              LDR      r2,|L16.220|
00005a  6b33              LDR      r3,[r6,#0x30]         ;330
00005c  6ab1              LDR      r1,[r6,#0x28]         ;330
00005e  e008              B        |L16.114|
                  |L16.96|
000060  69f7              LDR      r7,[r6,#0x1c]  ; USBD_MSC_BlockBuf
000062  180c              ADDS     r4,r1,r0
000064  5d3c              LDRB     r4,[r7,r4]
000066  5c17              LDRB     r7,[r2,r0]
000068  42bc              CMP      r4,r7
00006a  d001              BEQ      |L16.112|
;;;332                    MemOK = __FALSE;
;;;333                    break;
00006c  6235              STR      r5,[r6,#0x20]  ; MemOK
00006e  e002              B        |L16.118|
                  |L16.112|
000070  1c40              ADDS     r0,r0,#1
                  |L16.114|
000072  4298              CMP      r0,r3                 ;330
000074  d3f4              BCC      |L16.96|
                  |L16.118|
;;;334                }
;;;335            }
;;;336        }
;;;337    
;;;338        Offset += BulkLen;
000076  6b34              LDR      r4,[r6,#0x30]  ; BulkLen
000078  6ab0              LDR      r0,[r6,#0x28]  ; Offset
00007a  1901              ADDS     r1,r0,r4
;;;339        Length -= BulkLen;
00007c  62b1              STR      r1,[r6,#0x28]  ; Offset
00007e  6af0              LDR      r0,[r6,#0x2c]  ; Length
000080  1b07              SUBS     r7,r0,r4
000082  62f7              STR      r7,[r6,#0x2c]  ; Length
000084  e9d62004          LDRD     r2,r0,[r6,#0x10]
;;;340    
;;;341        if (Offset == USBD_MSC_BlockGroup * USBD_MSC_BlockSize) {
000088  4342              MULS     r2,r0,r2
00008a  428a              CMP      r2,r1
00008c  d103              BNE      |L16.150|
;;;342            Offset = 0;
;;;343            Block += USBD_MSC_BlockGroup;
00008e  62b5              STR      r5,[r6,#0x28]  ; Offset
000090  6a71              LDR      r1,[r6,#0x24]  ; Block
000092  4408              ADD      r0,r0,r1
000094  6270              STR      r0,[r6,#0x24]  ; Block
                  |L16.150|
;;;344        }
;;;345    
;;;346        USBD_MSC_CSW.dDataResidue -= BulkLen;
000096  480f              LDR      r0,|L16.212|
000098  3008              ADDS     r0,r0,#8
00009a  4605              MOV      r5,r0
00009c  f7fffffe          BL       __aeabi_uread4
0000a0  1b00              SUBS     r0,r0,r4
0000a2  4629              MOV      r1,r5
0000a4  f7fffffe          BL       __aeabi_uwrite4
;;;347    
;;;348        if (!BulkLen) {
0000a8  2c00              CMP      r4,#0
0000aa  d00e              BEQ      |L16.202|
;;;349            return;
;;;350        }
;;;351    
;;;352        if ((Length == 0) || (BulkStage == MSC_BS_CSW)) {
0000ac  b117              CBZ      r7,|L16.180|
0000ae  7830              LDRB     r0,[r6,#0]  ; BulkStage
0000b0  2805              CMP      r0,#5
0000b2  d10a              BNE      |L16.202|
                  |L16.180|
;;;353            USBD_MSC_CSW.bStatus = (MemOK) ? CSW_CMD_PASSED : CSW_CMD_FAILED;
0000b4  6a30              LDR      r0,[r6,#0x20]  ; MemOK
0000b6  b130              CBZ      r0,|L16.198|
0000b8  2000              MOVS     r0,#0
                  |L16.186|
0000ba  f888000c          STRB     r0,[r8,#0xc]
;;;354            USBD_MSC_SetCSW();
0000be  e8bd41f0          POP      {r4-r8,lr}
0000c2  f7ffbffe          B.W      USBD_MSC_SetCSW
                  |L16.198|
0000c6  2001              MOVS     r0,#1                 ;353
0000c8  e7f7              B        |L16.186|
                  |L16.202|
;;;355        }
;;;356    }
0000ca  e8bd81f0          POP      {r4-r8,pc}
;;;357    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L16.208|
                          DCD      ||.data||
                  |L16.212|
                          DCD      ||.bss||+0x1f
                  |L16.216|
                          DCD      usbd_msc_ep_bulkout
                  |L16.220|
                          DCD      USBD_MSC_BulkBuf

                          AREA ||i.USBD_MSC_MemoryWrite||, CODE, READONLY, ALIGN=2

                  USBD_MSC_MemoryWrite PROC
;;;237    
;;;238    void USBD_MSC_MemoryWrite(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;239    {
;;;240        U32 n;
;;;241    
;;;242        if (Block >= USBD_MSC_BlockCount) {
000004  f8df8100          LDR      r8,|L17.264|
;;;243            BulkLen = 0;
;;;244            USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
;;;245            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
000008  4f40              LDR      r7,|L17.268|
00000a  2600              MOVS     r6,#0
00000c  f8d81018          LDR      r1,[r8,#0x18]         ;242  ; USBD_MSC_BlockCount
000010  f8d80024          LDR      r0,[r8,#0x24]         ;242  ; Block
000014  4288              CMP      r0,r1                 ;242
000016  d308              BCC      |L17.42|
000018  483d              LDR      r0,|L17.272|
00001a  f8c86030          STR      r6,[r8,#0x30]         ;244  ; BulkLen
00001e  7800              LDRB     r0,[r0,#0]            ;244  ; usbd_msc_ep_bulkout
000020  f7fffffe          BL       USBD_MSC_SetStallEP
000024  733e              STRB     r6,[r7,#0xc]
;;;246            USBD_MSC_SetCSW();
000026  f7fffffe          BL       USBD_MSC_SetCSW
                  |L17.42|
;;;247        }
;;;248    
;;;249        if (!USBD_MSC_CheckMedia()) {
00002a  f7fffffe          BL       USBD_MSC_CheckMedia
00002e  b908              CBNZ     r0,|L17.52|
;;;250            BulkLen = 0;
000030  f8c86030          STR      r6,[r8,#0x30]  ; BulkLen
                  |L17.52|
;;;251        }
;;;252    
;;;253        if (Offset + BulkLen > USBD_MSC_BlockSize) {
000034  f8d81030          LDR      r1,[r8,#0x30]  ; BulkLen
000038  f8d80028          LDR      r0,[r8,#0x28]  ; Offset
00003c  4408              ADD      r0,r0,r1
00003e  f8d81010          LDR      r1,[r8,#0x10]  ; USBD_MSC_BlockSize
000042  4288              CMP      r0,r1
000044  d906              BLS      |L17.84|
;;;254            // This write would have overflowed USBD_MSC_BlockBuf
;;;255            util_assert(0);
000046  e8bd41f0          POP      {r4-r8,lr}
00004a  22ff              MOVS     r2,#0xff
00004c  a131              ADR      r1,|L17.276|
00004e  2000              MOVS     r0,#0
000050  f7ffbffe          B.W      _util_assert
                  |L17.84|
;;;256            return;
;;;257        }
;;;258    
;;;259        for (n = 0; n < BulkLen; n++) {
000054  2000              MOVS     r0,#0
;;;260            USBD_MSC_BlockBuf[Offset + n] = USBD_MSC_BulkBuf[n];
000056  4938              LDR      r1,|L17.312|
000058  e007              B        |L17.106|
                  |L17.90|
00005a  f8d83028          LDR      r3,[r8,#0x28]  ; Offset
00005e  f8d8401c          LDR      r4,[r8,#0x1c]  ; USBD_MSC_BlockBuf
000062  5c0a              LDRB     r2,[r1,r0]
000064  4403              ADD      r3,r3,r0
000066  1c40              ADDS     r0,r0,#1
000068  54e2              STRB     r2,[r4,r3]
                  |L17.106|
00006a  f8d82030          LDR      r2,[r8,#0x30]         ;259  ; BulkLen
00006e  4290              CMP      r0,r2                 ;259
000070  d3f3              BCC      |L17.90|
;;;261        }
;;;262    
;;;263        Offset += BulkLen;
000072  f8d80028          LDR      r0,[r8,#0x28]  ; Offset
000076  0011              MOVS     r1,r2
000078  4408              ADD      r0,r0,r1
;;;264        Length -= BulkLen;
00007a  f8c80028          STR      r0,[r8,#0x28]  ; Offset
00007e  f8d8202c          LDR      r2,[r8,#0x2c]  ; Length
000082  eba20201          SUB      r2,r2,r1
;;;265    
;;;266        if (BulkLen) {
000086  f8c8202c          STR      r2,[r8,#0x2c]  ; Length
00008a  d022              BEQ      |L17.210|
;;;267            if ((Length == 0) && (Offset != 0)) {
00008c  4645              MOV      r5,r8
00008e  b992              CBNZ     r2,|L17.182|
000090  b188              CBZ      r0,|L17.182|
;;;268                n = (Offset + (USBD_MSC_BlockSize - 1)) / USBD_MSC_BlockSize;
000092  6929              LDR      r1,[r5,#0x10]  ; USBD_MSC_BlockSize
000094  4408              ADD      r0,r0,r1
000096  1e40              SUBS     r0,r0,#1
000098  fbb0f4f1          UDIV     r4,r0,r1
;;;269    
;;;270                if (n > USBD_MSC_BlockGroup) {
00009c  6968              LDR      r0,[r5,#0x14]  ; USBD_MSC_BlockGroup
00009e  4284              CMP      r4,r0
0000a0  d900              BLS      |L17.164|
;;;271                    n = USBD_MSC_BlockGroup;
0000a2  4604              MOV      r4,r0
                  |L17.164|
;;;272                }
;;;273    
;;;274                usbd_msc_write_sect(Block, USBD_MSC_BlockBuf, n);
0000a4  4622              MOV      r2,r4
0000a6  69e9              LDR      r1,[r5,#0x1c]  ; USBD_MSC_BlockBuf
0000a8  6a68              LDR      r0,[r5,#0x24]  ; Block
0000aa  f7fffffe          BL       usbd_msc_write_sect
;;;275                Offset = 0;
;;;276                Block += n;
0000ae  62ae              STR      r6,[r5,#0x28]  ; Offset
0000b0  6a68              LDR      r0,[r5,#0x24]  ; Block
0000b2  4420              ADD      r0,r0,r4
0000b4  e00c              B        |L17.208|
                  |L17.182|
0000b6  e9d51204          LDRD     r1,r2,[r5,#0x10]
;;;277            } else if (Offset == USBD_MSC_BlockGroup * USBD_MSC_BlockSize) {
0000ba  4351              MULS     r1,r2,r1
0000bc  4281              CMP      r1,r0
0000be  d108              BNE      |L17.210|
;;;278                usbd_msc_write_sect(Block, USBD_MSC_BlockBuf, USBD_MSC_BlockGroup);
0000c0  69e9              LDR      r1,[r5,#0x1c]  ; USBD_MSC_BlockBuf
0000c2  6a68              LDR      r0,[r5,#0x24]  ; Block
0000c4  f7fffffe          BL       usbd_msc_write_sect
;;;279                Offset = 0;
;;;280                Block += USBD_MSC_BlockGroup;
0000c8  62ae              STR      r6,[r5,#0x28]  ; Offset
0000ca  6969              LDR      r1,[r5,#0x14]  ; USBD_MSC_BlockGroup
0000cc  6a68              LDR      r0,[r5,#0x24]  ; Block
0000ce  4408              ADD      r0,r0,r1
                  |L17.208|
0000d0  6268              STR      r0,[r5,#0x24]  ; Block
                  |L17.210|
;;;281            }
;;;282        }
;;;283    
;;;284        USBD_MSC_CSW.dDataResidue -= BulkLen;
0000d2  480e              LDR      r0,|L17.268|
0000d4  3008              ADDS     r0,r0,#8
0000d6  4605              MOV      r5,r0
0000d8  f7fffffe          BL       __aeabi_uread4
0000dc  f8d84030          LDR      r4,[r8,#0x30]  ; BulkLen
0000e0  4629              MOV      r1,r5
0000e2  1b00              SUBS     r0,r0,r4
0000e4  f7fffffe          BL       __aeabi_uwrite4
;;;285    
;;;286        if (!BulkLen) {
0000e8  2c00              CMP      r4,#0
0000ea  d00b              BEQ      |L17.260|
;;;287            return;
;;;288        }
;;;289    
;;;290        if ((Length == 0) || (BulkStage == MSC_BS_CSW)) {
0000ec  f8d8002c          LDR      r0,[r8,#0x2c]  ; Length
0000f0  b118              CBZ      r0,|L17.250|
0000f2  f8980000          LDRB     r0,[r8,#0]  ; BulkStage
0000f6  2805              CMP      r0,#5
0000f8  d104              BNE      |L17.260|
                  |L17.250|
;;;291            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
0000fa  733e              STRB     r6,[r7,#0xc]
;;;292            USBD_MSC_SetCSW();
0000fc  e8bd41f0          POP      {r4-r8,lr}
000100  f7ffbffe          B.W      USBD_MSC_SetCSW
                  |L17.260|
;;;293        }
;;;294    }
000104  e8bd81f0          POP      {r4-r8,pc}
;;;295    
                          ENDP

                  |L17.264|
                          DCD      ||.data||
                  |L17.268|
                          DCD      ||.bss||+0x1f
                  |L17.272|
                          DCD      usbd_msc_ep_bulkout
                  |L17.276|
000114  2e2e5c2e          DCB      "..\\..\\..\\source\\usb\\msc\\usbd_msc.c",0
000118  2e5c2e2e
00011c  5c736f75
000120  7263655c
000124  7573625c
000128  6d73635c
00012c  75736264
000130  5f6d7363
000134  2e6300  
000137  00                DCB      0
                  |L17.312|
                          DCD      USBD_MSC_BulkBuf

                          AREA ||i.USBD_MSC_ModeSense10||, CODE, READONLY, ALIGN=2

                  USBD_MSC_ModeSense10 PROC
;;;670    
;;;671    void USBD_MSC_ModeSense10(void)
000000  b570              PUSH     {r4-r6,lr}
;;;672    {
;;;673        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d026              BEQ      |L18.88|
;;;674            return;
;;;675        }
;;;676    
;;;677        if (!USBD_MSC_CheckMedia()) {
00000a  f7fffffe          BL       USBD_MSC_CheckMedia
00000e  2800              CMP      r0,#0
000010  d022              BEQ      |L18.88|
;;;678            return;
;;;679        }
;;;680    
;;;681        USBD_MSC_BulkBuf[ 0] = 0x00;
000012  4812              LDR      r0,|L18.92|
000014  2100              MOVS     r1,#0
;;;682        USBD_MSC_BulkBuf[ 1] = 0x06;
000016  2206              MOVS     r2,#6
000018  7001              STRB     r1,[r0,#0]            ;681
;;;683        USBD_MSC_BulkBuf[ 2] = 0x00;
;;;684        USBD_MSC_BulkBuf[ 3] = (USBD_MSC_ReadOnly << 7);
00001a  4b11              LDR      r3,|L18.96|
00001c  7042              STRB     r2,[r0,#1]            ;682
00001e  7081              STRB     r1,[r0,#2]            ;683
000020  7a1a              LDRB     r2,[r3,#8]  ; USBD_MSC_ReadOnly
;;;685        USBD_MSC_BulkBuf[ 4] = 0x00;
;;;686        USBD_MSC_BulkBuf[ 5] = 0x00;
;;;687        USBD_MSC_BulkBuf[ 6] = 0x00;
;;;688        USBD_MSC_BulkBuf[ 7] = 0x00;
;;;689        BulkLen = 8;
000022  2408              MOVS     r4,#8
000024  01d2              LSLS     r2,r2,#7              ;684
000026  70c2              STRB     r2,[r0,#3]            ;684
000028  7101              STRB     r1,[r0,#4]            ;685
00002a  7141              STRB     r1,[r0,#5]            ;686
00002c  7181              STRB     r1,[r0,#6]            ;687
00002e  71c1              STRB     r1,[r0,#7]            ;688
;;;690    
;;;691        /* Win host requests maximum number of bytes but as all we have is 8 bytes we have
;;;692           to tell host back that it is all we have, that's why we correct residue */
;;;693        if (USBD_MSC_CSW.dDataResidue > BulkLen) {
000030  480c              LDR      r0,|L18.100|
000032  631c              STR      r4,[r3,#0x30]  ; BulkLen
000034  4605              MOV      r5,r0
000036  f7fffffe          BL       __aeabi_uread4
00003a  2808              CMP      r0,#8
00003c  d908              BLS      |L18.80|
;;;694            USBD_MSC_CBW.dDataLength  = BulkLen;
00003e  4909              LDR      r1,|L18.100|
000040  4620              MOV      r0,r4
000042  391f              SUBS     r1,r1,#0x1f
000044  f7fffffe          BL       __aeabi_uwrite4
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
;;;695            USBD_MSC_CSW.dDataResidue = BulkLen;
00004c  f7fffffe          BL       __aeabi_uwrite4
                  |L18.80|
;;;696        }
;;;697    
;;;698        USBD_MSC_DataInTransfer();
000050  e8bd4070          POP      {r4-r6,lr}
000054  f7ffbffe          B.W      USBD_MSC_DataInTransfer
                  |L18.88|
;;;699    }
000058  bd70              POP      {r4-r6,pc}
;;;700    
                          ENDP

00005a  0000              DCW      0x0000
                  |L18.92|
                          DCD      USBD_MSC_BulkBuf
                  |L18.96|
                          DCD      ||.data||
                  |L18.100|
                          DCD      ||.bss||+0x27

                          AREA ||i.USBD_MSC_ModeSense6||, CODE, READONLY, ALIGN=2

                  USBD_MSC_ModeSense6 PROC
;;;637    
;;;638    void USBD_MSC_ModeSense6(void)
000000  b570              PUSH     {r4-r6,lr}
;;;639    {
;;;640        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d022              BEQ      |L19.80|
;;;641            return;
;;;642        }
;;;643    
;;;644        if (!USBD_MSC_CheckMedia()) {
00000a  f7fffffe          BL       USBD_MSC_CheckMedia
00000e  2800              CMP      r0,#0
000010  d01e              BEQ      |L19.80|
;;;645            return;
;;;646        }
;;;647    
;;;648        USBD_MSC_BulkBuf[ 0] = 0x03;
000012  4810              LDR      r0,|L19.84|
000014  2103              MOVS     r1,#3
;;;649        USBD_MSC_BulkBuf[ 1] = 0x00;
000016  2200              MOVS     r2,#0
000018  7001              STRB     r1,[r0,#0]            ;648
;;;650        USBD_MSC_BulkBuf[ 2] = (USBD_MSC_ReadOnly << 7);
00001a  490f              LDR      r1,|L19.88|
00001c  7042              STRB     r2,[r0,#1]            ;649
;;;651        USBD_MSC_BulkBuf[ 3] = 0x00;
;;;652        BulkLen = 4;
00001e  2404              MOVS     r4,#4
000020  7a0b              LDRB     r3,[r1,#8]            ;650  ; USBD_MSC_ReadOnly
000022  01db              LSLS     r3,r3,#7              ;650
000024  7083              STRB     r3,[r0,#2]            ;650
000026  70c2              STRB     r2,[r0,#3]            ;651
;;;653    
;;;654        /* Win host requests maximum number of bytes but as all we have is 4 bytes we have
;;;655           to tell host back that it is all we have, that's why we correct residue */
;;;656        if (USBD_MSC_CSW.dDataResidue > BulkLen) {
000028  480c              LDR      r0,|L19.92|
00002a  630c              STR      r4,[r1,#0x30]  ; BulkLen
00002c  4605              MOV      r5,r0
00002e  f7fffffe          BL       __aeabi_uread4
000032  2804              CMP      r0,#4
000034  d908              BLS      |L19.72|
;;;657            USBD_MSC_CBW.dDataLength  = BulkLen;
000036  4909              LDR      r1,|L19.92|
000038  4620              MOV      r0,r4
00003a  391f              SUBS     r1,r1,#0x1f
00003c  f7fffffe          BL       __aeabi_uwrite4
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
;;;658            USBD_MSC_CSW.dDataResidue = BulkLen;
000044  f7fffffe          BL       __aeabi_uwrite4
                  |L19.72|
;;;659        }
;;;660    
;;;661        USBD_MSC_DataInTransfer();
000048  e8bd4070          POP      {r4-r6,lr}
00004c  f7ffbffe          B.W      USBD_MSC_DataInTransfer
                  |L19.80|
;;;662    }
000050  bd70              POP      {r4-r6,pc}
;;;663    
                          ENDP

000052  0000              DCW      0x0000
                  |L19.84|
                          DCD      USBD_MSC_BulkBuf
                  |L19.88|
                          DCD      ||.data||
                  |L19.92|
                          DCD      ||.bss||+0x27

                          AREA ||i.USBD_MSC_RWSetup||, CODE, READONLY, ALIGN=2

                  USBD_MSC_RWSetup PROC
;;;364    
;;;365    BOOL USBD_MSC_RWSetup(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;366    {
;;;367        U32 n;
;;;368        /* Logical Block Address of First Block */
;;;369        n = (USBD_MSC_CBW.CB[2] << 24) |
000004  4829              LDR      r0,|L20.172|
000006  f7fffffe          BL       __aeabi_uread4
00000a  4d28              LDR      r5,|L20.172|
00000c  ba00              REV      r0,r0
00000e  3d11              SUBS     r5,r5,#0x11
000010  f02004ff          BIC      r4,r0,#0xff
000014  7d28              LDRB     r0,[r5,#0x14]  ; USBD_MSC_CBW
;;;370            (USBD_MSC_CBW.CB[3] << 16) |
;;;371            (USBD_MSC_CBW.CB[4] <<  8) |
;;;372            (USBD_MSC_CBW.CB[5] <<  0);
;;;373        Block  = n;
000016  4e26              LDR      r6,|L20.176|
000018  4304              ORRS     r4,r4,r0              ;369
;;;374        Offset = 0;
00001a  2000              MOVS     r0,#0
00001c  e9c64009          STRD     r4,r0,[r6,#0x24]
;;;375    
;;;376        /* Number of Blocks to transfer */
;;;377        switch (USBD_MSC_CBW.CB[0]) {
000020  7be8              LDRB     r0,[r5,#0xf]  ; USBD_MSC_CBW
000022  282f              CMP      r0,#0x2f
000024  d00a              BEQ      |L20.60|
000026  dc04              BGT      |L20.50|
000028  2828              CMP      r0,#0x28
00002a  d00b              BEQ      |L20.68|
00002c  282a              CMP      r0,#0x2a
00002e  d11c              BNE      |L20.106|
000030  e004              B        |L20.60|
                  |L20.50|
000032  28a8              CMP      r0,#0xa8
000034  d010              BEQ      |L20.88|
000036  28aa              CMP      r0,#0xaa
000038  d117              BNE      |L20.106|
00003a  e009              B        |L20.80|
                  |L20.60|
;;;378            case SCSI_WRITE10:
;;;379            case SCSI_VERIFY10:
;;;380                if (!USBD_MSC_CheckMedia()) {
00003c  f7fffffe          BL       USBD_MSC_CheckMedia
000040  2800              CMP      r0,#0
000042  d02f              BEQ      |L20.164|
                  |L20.68|
;;;381                    return (__FALSE);
;;;382                }
;;;383    
;;;384            case SCSI_READ10:
;;;385                n = (USBD_MSC_CBW.CB[7] <<  8) |
000044  7de8              LDRB     r0,[r5,#0x17]  ; USBD_MSC_CBW
000046  7da9              LDRB     r1,[r5,#0x16]  ; USBD_MSC_CBW
000048  ea412000          ORR      r0,r1,r0,LSL #8
00004c  ba44              REV16    r4,r0
;;;386                    (USBD_MSC_CBW.CB[8] <<  0);
;;;387                break;
00004e  e00c              B        |L20.106|
                  |L20.80|
;;;388    
;;;389            case SCSI_WRITE12:
;;;390                if (!USBD_MSC_CheckMedia()) {
000050  f7fffffe          BL       USBD_MSC_CheckMedia
000054  2800              CMP      r0,#0
000056  d025              BEQ      |L20.164|
                  |L20.88|
;;;391                    return (__FALSE);
;;;392                }
;;;393    
;;;394            case SCSI_READ12:
;;;395                n = (USBD_MSC_CBW.CB[6] << 24) |
000058  4814              LDR      r0,|L20.172|
00005a  1d00              ADDS     r0,r0,#4
00005c  f7fffffe          BL       __aeabi_uread4
000060  ba00              REV      r0,r0
000062  f02004ff          BIC      r4,r0,#0xff
000066  7e28              LDRB     r0,[r5,#0x18]  ; USBD_MSC_CBW
000068  4304              ORRS     r4,r4,r0
                  |L20.106|
;;;396                    (USBD_MSC_CBW.CB[7] << 16) |
;;;397                    (USBD_MSC_CBW.CB[8] <<  8) |
;;;398                    (USBD_MSC_CBW.CB[9] <<  0);
;;;399                break;
;;;400        }
;;;401    
;;;402        Length = n * USBD_MSC_BlockSize;
00006a  6930              LDR      r0,[r6,#0x10]  ; USBD_MSC_BlockSize
00006c  4344              MULS     r4,r0,r4
;;;403    
;;;404        if (USBD_MSC_CBW.dDataLength == 0) {     /* host requests no data */
00006e  480f              LDR      r0,|L20.172|
000070  62f4              STR      r4,[r6,#0x2c]  ; Length
000072  3809              SUBS     r0,r0,#9
000074  f7fffffe          BL       __aeabi_uread4
;;;405            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
000078  4f0c              LDR      r7,|L20.172|
00007a  2601              MOVS     r6,#1
00007c  370e              ADDS     r7,r7,#0xe
00007e  b168              CBZ      r0,|L20.156|
;;;406            USBD_MSC_SetCSW();
;;;407            return (__FALSE);
;;;408        }
;;;409    
;;;410        if (USBD_MSC_CBW.dDataLength != Length) {
000080  42a0              CMP      r0,r4
000082  d011              BEQ      |L20.168|
;;;411            if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {  /* stall appropriate EP */
000084  7b28              LDRB     r0,[r5,#0xc]  ; USBD_MSC_CBW
000086  0600              LSLS     r0,r0,#24
000088  d504              BPL      |L20.148|
;;;412                USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
00008a  480a              LDR      r0,|L20.180|
00008c  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkin
00008e  f0400080          ORR      r0,r0,#0x80
000092  e001              B        |L20.152|
                  |L20.148|
;;;413            } else {
;;;414                USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
000094  4808              LDR      r0,|L20.184|
000096  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkout
                  |L20.152|
000098  f7fffffe          BL       USBD_MSC_SetStallEP
                  |L20.156|
;;;415            }
;;;416    
;;;417            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
00009c  733e              STRB     r6,[r7,#0xc]
;;;418            USBD_MSC_SetCSW();
00009e  f7fffffe          BL       USBD_MSC_SetCSW
;;;419            return (__FALSE);
0000a2  2000              MOVS     r0,#0
                  |L20.164|
;;;420        }
;;;421    
;;;422        return (__TRUE);
;;;423    }
0000a4  e8bd81f0          POP      {r4-r8,pc}
                  |L20.168|
0000a8  2001              MOVS     r0,#1                 ;422
0000aa  e7fb              B        |L20.164|
;;;424    
                          ENDP

                  |L20.172|
                          DCD      ||.bss||+0x11
                  |L20.176|
                          DCD      ||.data||
                  |L20.180|
                          DCD      usbd_msc_ep_bulkin
                  |L20.184|
                          DCD      usbd_msc_ep_bulkout

                          AREA ||i.USBD_MSC_ReadCapacity||, CODE, READONLY, ALIGN=2

                  USBD_MSC_ReadCapacity PROC
;;;707    
;;;708    void USBD_MSC_ReadCapacity(void)
000000  b510              PUSH     {r4,lr}
;;;709    {
;;;710        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d01c              BEQ      |L21.68|
;;;711            return;
;;;712        }
;;;713    
;;;714        if (!USBD_MSC_CheckMedia()) {
00000a  f7fffffe          BL       USBD_MSC_CheckMedia
00000e  2800              CMP      r0,#0
000010  d018              BEQ      |L21.68|
;;;715            return;
;;;716        }
;;;717    
;;;718        /* Last Logical Block */
;;;719        USBD_MSC_BulkBuf[ 0] = ((USBD_MSC_BlockCount - 1) >> 24) & 0xFF;
000012  4a0d              LDR      r2,|L21.72|
000014  480d              LDR      r0,|L21.76|
000016  6991              LDR      r1,[r2,#0x18]  ; USBD_MSC_BlockCount
000018  1e49              SUBS     r1,r1,#1
00001a  0e0b              LSRS     r3,r1,#24
00001c  7003              STRB     r3,[r0,#0]
;;;720        USBD_MSC_BulkBuf[ 1] = ((USBD_MSC_BlockCount - 1) >> 16) & 0xFF;
00001e  0c0b              LSRS     r3,r1,#16
000020  7043              STRB     r3,[r0,#1]
;;;721        USBD_MSC_BulkBuf[ 2] = ((USBD_MSC_BlockCount - 1) >>  8) & 0xFF;
000022  0a0b              LSRS     r3,r1,#8
000024  7083              STRB     r3,[r0,#2]
;;;722        USBD_MSC_BulkBuf[ 3] = ((USBD_MSC_BlockCount - 1) >>  0) & 0xFF;
000026  70c1              STRB     r1,[r0,#3]
;;;723        /* Block Length */
;;;724        USBD_MSC_BulkBuf[ 4] = (USBD_MSC_BlockSize        >> 24) & 0xFF;
000028  6911              LDR      r1,[r2,#0x10]  ; USBD_MSC_BlockSize
00002a  0e0b              LSRS     r3,r1,#24
00002c  7103              STRB     r3,[r0,#4]
;;;725        USBD_MSC_BulkBuf[ 5] = (USBD_MSC_BlockSize        >> 16) & 0xFF;
00002e  0c0b              LSRS     r3,r1,#16
000030  7143              STRB     r3,[r0,#5]
;;;726        USBD_MSC_BulkBuf[ 6] = (USBD_MSC_BlockSize        >>  8) & 0xFF;
000032  0a0b              LSRS     r3,r1,#8
000034  7183              STRB     r3,[r0,#6]
;;;727        USBD_MSC_BulkBuf[ 7] = (USBD_MSC_BlockSize        >>  0) & 0xFF;
000036  71c1              STRB     r1,[r0,#7]
;;;728        BulkLen = 8;
000038  2008              MOVS     r0,#8
;;;729        USBD_MSC_DataInTransfer();
00003a  6310              STR      r0,[r2,#0x30]  ; BulkLen
00003c  e8bd4010          POP      {r4,lr}
000040  f7ffbffe          B.W      USBD_MSC_DataInTransfer
                  |L21.68|
;;;730    }
000044  bd10              POP      {r4,pc}
;;;731    
                          ENDP

000046  0000              DCW      0x0000
                  |L21.72|
                          DCD      ||.data||
                  |L21.76|
                          DCD      USBD_MSC_BulkBuf

                          AREA ||i.USBD_MSC_ReadFormatCapacity||, CODE, READONLY, ALIGN=2

                  USBD_MSC_ReadFormatCapacity PROC
;;;738    
;;;739    void USBD_MSC_ReadFormatCapacity(void)
000000  b570              PUSH     {r4-r6,lr}
;;;740    {
;;;741        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d030              BEQ      |L22.108|
;;;742            return;
;;;743        }
;;;744    
;;;745        if (!USBD_MSC_CheckMedia()) {
00000a  f7fffffe          BL       USBD_MSC_CheckMedia
00000e  2800              CMP      r0,#0
000010  d02c              BEQ      |L22.108|
;;;746            return;
;;;747        }
;;;748    
;;;749        USBD_MSC_BulkBuf[ 0] = 0x00;
000012  4817              LDR      r0,|L22.112|
000014  2100              MOVS     r1,#0
;;;750        USBD_MSC_BulkBuf[ 1] = 0x00;
;;;751        USBD_MSC_BulkBuf[ 2] = 0x00;
;;;752        USBD_MSC_BulkBuf[ 3] = 0x08;                      /* Capacity List Length */
;;;753        /* Block Count */
;;;754        USBD_MSC_BulkBuf[ 4] = (USBD_MSC_BlockCount >> 24) & 0xFF;
000016  4a17              LDR      r2,|L22.116|
000018  7001              STRB     r1,[r0,#0]            ;749
00001a  7041              STRB     r1,[r0,#1]            ;750
00001c  7081              STRB     r1,[r0,#2]            ;751
00001e  2108              MOVS     r1,#8                 ;752
000020  70c1              STRB     r1,[r0,#3]            ;752
000022  6991              LDR      r1,[r2,#0x18]  ; USBD_MSC_BlockCount
;;;755        USBD_MSC_BulkBuf[ 5] = (USBD_MSC_BlockCount >> 16) & 0xFF;
;;;756        USBD_MSC_BulkBuf[ 6] = (USBD_MSC_BlockCount >>  8) & 0xFF;
;;;757        USBD_MSC_BulkBuf[ 7] = (USBD_MSC_BlockCount >>  0) & 0xFF;
;;;758        /* Block Length */
;;;759        USBD_MSC_BulkBuf[ 8] = 0x02;                      /* Descriptor Code: Formatted Media */
;;;760        USBD_MSC_BulkBuf[ 9] = (USBD_MSC_BlockSize  >> 16) & 0xFF;
;;;761        USBD_MSC_BulkBuf[10] = (USBD_MSC_BlockSize  >>  8) & 0xFF;
;;;762        USBD_MSC_BulkBuf[11] = (USBD_MSC_BlockSize  >>  0) & 0xFF;
;;;763        BulkLen = 12;
000024  240c              MOVS     r4,#0xc
000026  0e0b              LSRS     r3,r1,#24             ;754
000028  7103              STRB     r3,[r0,#4]            ;754
00002a  0c0b              LSRS     r3,r1,#16             ;755
00002c  7143              STRB     r3,[r0,#5]            ;755
00002e  0a0b              LSRS     r3,r1,#8              ;756
000030  7183              STRB     r3,[r0,#6]            ;756
000032  71c1              STRB     r1,[r0,#7]            ;757
000034  2102              MOVS     r1,#2                 ;759
000036  7201              STRB     r1,[r0,#8]            ;759
000038  6911              LDR      r1,[r2,#0x10]         ;760  ; USBD_MSC_BlockSize
00003a  0c0b              LSRS     r3,r1,#16             ;760
00003c  7243              STRB     r3,[r0,#9]            ;760
00003e  0a0b              LSRS     r3,r1,#8              ;761
000040  7283              STRB     r3,[r0,#0xa]          ;761
000042  72c1              STRB     r1,[r0,#0xb]          ;762
;;;764    
;;;765        /* Win host requests maximum number of bytes but as all we have is 12 bytes we have
;;;766           to tell host back that it is all we have, that's why we correct residue */
;;;767        if (USBD_MSC_CSW.dDataResidue > BulkLen) {
000044  480c              LDR      r0,|L22.120|
000046  6314              STR      r4,[r2,#0x30]  ; BulkLen
000048  4605              MOV      r5,r0
00004a  f7fffffe          BL       __aeabi_uread4
00004e  280c              CMP      r0,#0xc
000050  d908              BLS      |L22.100|
;;;768            USBD_MSC_CBW.dDataLength  = BulkLen;
000052  4909              LDR      r1,|L22.120|
000054  4620              MOV      r0,r4
000056  391f              SUBS     r1,r1,#0x1f
000058  f7fffffe          BL       __aeabi_uwrite4
00005c  4629              MOV      r1,r5
00005e  4620              MOV      r0,r4
;;;769            USBD_MSC_CSW.dDataResidue = BulkLen;
000060  f7fffffe          BL       __aeabi_uwrite4
                  |L22.100|
;;;770        }
;;;771    
;;;772        USBD_MSC_DataInTransfer();
000064  e8bd4070          POP      {r4-r6,lr}
000068  f7ffbffe          B.W      USBD_MSC_DataInTransfer
                  |L22.108|
;;;773    }
00006c  bd70              POP      {r4-r6,pc}
;;;774    
                          ENDP

00006e  0000              DCW      0x0000
                  |L22.112|
                          DCD      USBD_MSC_BulkBuf
                  |L22.116|
                          DCD      ||.data||
                  |L22.120|
                          DCD      ||.bss||+0x27

                          AREA ||i.USBD_MSC_RequestSense||, CODE, READONLY, ALIGN=2

                  USBD_MSC_RequestSense PROC
;;;506    
;;;507    void USBD_MSC_RequestSense(void)
000000  b510              PUSH     {r4,lr}
;;;508    {
;;;509        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d035              BEQ      |L23.118|
;;;510            return;
;;;511        }
;;;512    
;;;513        USBD_MSC_BulkBuf[ 0] = 0x70;             /* Response Code */
00000a  481b              LDR      r0,|L23.120|
00000c  2170              MOVS     r1,#0x70
;;;514        USBD_MSC_BulkBuf[ 1] = 0x00;
;;;515    
;;;516        if ((USBD_MSC_MediaReadyEx ^ USBD_MSC_MediaReady) & USBD_MSC_MediaReady) {  /* If media state changed to ready */
00000e  4b1b              LDR      r3,|L23.124|
000010  7001              STRB     r1,[r0,#0]            ;513
000012  2100              MOVS     r1,#0                 ;514
000014  7041              STRB     r1,[r0,#1]            ;514
000016  68dc              LDR      r4,[r3,#0xc]  ; USBD_MSC_MediaReadyEx
000018  685a              LDR      r2,[r3,#4]  ; USBD_MSC_MediaReady
00001a  ea320404          BICS     r4,r2,r4
00001e  d006              BEQ      |L23.46|
;;;517            USBD_MSC_BulkBuf[ 2] = 0x06;           /* UNIT ATTENTION */
000020  2406              MOVS     r4,#6
000022  7084              STRB     r4,[r0,#2]
;;;518            USBD_MSC_BulkBuf[12] = 0x28;           /* Additional Sense Code: Not ready to ready transition */
000024  2428              MOVS     r4,#0x28
000026  7304              STRB     r4,[r0,#0xc]
;;;519            USBD_MSC_BulkBuf[13] = 0x00;           /* Additional Sense Code Qualifier */
000028  7341              STRB     r1,[r0,#0xd]
;;;520            USBD_MSC_MediaReadyEx = USBD_MSC_MediaReady;
00002a  60da              STR      r2,[r3,#0xc]  ; USBD_MSC_MediaReadyEx
00002c  e008              B        |L23.64|
                  |L23.46|
;;;521        } else if (!USBD_MSC_MediaReady) {
00002e  b1da              CBZ      r2,|L23.104|
;;;522            USBD_MSC_BulkBuf[ 2] = 0x02;           /* NOT READY */
;;;523            USBD_MSC_BulkBuf[12] = 0x3A;           /* Additional Sense Code: Medium not present */
;;;524            USBD_MSC_BulkBuf[13] = 0x00;           /* Additional Sense Code Qualifier */
;;;525        } else {
;;;526            if (USBD_MSC_CSW.bStatus == CSW_CMD_PASSED) {
000030  4a13              LDR      r2,|L23.128|
000032  7b12              LDRB     r2,[r2,#0xc]  ; USBD_MSC_CSW
000034  b1e2              CBZ      r2,|L23.112|
;;;527                USBD_MSC_BulkBuf[ 2] = 0x00;         /* NO SENSE */
;;;528                USBD_MSC_BulkBuf[12] = 0x00;         /* Additional Sense Code: No additional code */
;;;529                USBD_MSC_BulkBuf[13] = 0x00;         /* Additional Sense Code Qualifier */
;;;530            } else {
;;;531                USBD_MSC_BulkBuf[ 2] = 0x05;         /* ILLEGAL REQUEST */
000036  2205              MOVS     r2,#5
000038  7082              STRB     r2,[r0,#2]
;;;532                USBD_MSC_BulkBuf[12] = 0x20;         /* Additional Sense Code: Invalid command */
00003a  2220              MOVS     r2,#0x20
                  |L23.60|
00003c  7302              STRB     r2,[r0,#0xc]          ;523
                  |L23.62|
00003e  7341              STRB     r1,[r0,#0xd]          ;529
                  |L23.64|
;;;533                USBD_MSC_BulkBuf[13] = 0x00;         /* Additional Sense Code Qualifier */
;;;534            }
;;;535        }
;;;536    
;;;537        USBD_MSC_BulkBuf[ 3] = 0x00;
000040  70c1              STRB     r1,[r0,#3]
;;;538        USBD_MSC_BulkBuf[ 4] = 0x00;
000042  7101              STRB     r1,[r0,#4]
;;;539        USBD_MSC_BulkBuf[ 5] = 0x00;
000044  7141              STRB     r1,[r0,#5]
;;;540        USBD_MSC_BulkBuf[ 6] = 0x00;
000046  7181              STRB     r1,[r0,#6]
;;;541        USBD_MSC_BulkBuf[ 7] = 0x0A;             /* Additional Length */
000048  220a              MOVS     r2,#0xa
00004a  71c2              STRB     r2,[r0,#7]
;;;542        USBD_MSC_BulkBuf[ 8] = 0x00;
00004c  7201              STRB     r1,[r0,#8]
;;;543        USBD_MSC_BulkBuf[ 9] = 0x00;
00004e  7241              STRB     r1,[r0,#9]
;;;544        USBD_MSC_BulkBuf[10] = 0x00;
000050  7281              STRB     r1,[r0,#0xa]
;;;545        USBD_MSC_BulkBuf[11] = 0x00;
000052  72c1              STRB     r1,[r0,#0xb]
;;;546        USBD_MSC_BulkBuf[14] = 0x00;
000054  7381              STRB     r1,[r0,#0xe]
;;;547        USBD_MSC_BulkBuf[15] = 0x00;
000056  73c1              STRB     r1,[r0,#0xf]
;;;548        USBD_MSC_BulkBuf[16] = 0x00;
000058  7401              STRB     r1,[r0,#0x10]
;;;549        USBD_MSC_BulkBuf[17] = 0x00;
00005a  7441              STRB     r1,[r0,#0x11]
;;;550        BulkLen = 18;
00005c  2012              MOVS     r0,#0x12
;;;551        USBD_MSC_DataInTransfer();
00005e  6318              STR      r0,[r3,#0x30]  ; BulkLen
000060  e8bd4010          POP      {r4,lr}
000064  f7ffbffe          B.W      USBD_MSC_DataInTransfer
                  |L23.104|
000068  2202              MOVS     r2,#2                 ;522
00006a  7082              STRB     r2,[r0,#2]            ;522
00006c  223a              MOVS     r2,#0x3a              ;523
00006e  e7e5              B        |L23.60|
                  |L23.112|
000070  7081              STRB     r1,[r0,#2]            ;527
000072  7301              STRB     r1,[r0,#0xc]          ;528
000074  e7e3              B        |L23.62|
                  |L23.118|
;;;552    }
000076  bd10              POP      {r4,pc}
;;;553    
                          ENDP

                  |L23.120|
                          DCD      USBD_MSC_BulkBuf
                  |L23.124|
                          DCD      ||.data||
                  |L23.128|
                          DCD      ||.bss||+0x1f

                          AREA ||i.USBD_MSC_Reset||, CODE, READONLY, ALIGN=2

                  USBD_MSC_Reset PROC
;;;114    
;;;115    BOOL USBD_MSC_Reset(void)
000000  4905              LDR      r1,|L24.24|
;;;116    {
000002  b510              PUSH     {r4,lr}
;;;117        USBD_EndPointStall = 0x00000000;         /* EP must stay stalled */
000004  2000              MOVS     r0,#0
;;;118        USBD_MSC_CSW.dSignature = 0;             /* invalid signature */
000006  6008              STR      r0,[r1,#0]  ; USBD_EndPointStall
000008  4904              LDR      r1,|L24.28|
00000a  f7fffffe          BL       __aeabi_uwrite4
;;;119        BulkStage = MSC_BS_RESET;
00000e  4904              LDR      r1,|L24.32|
000010  2007              MOVS     r0,#7
000012  7008              STRB     r0,[r1,#0]
;;;120        return (__TRUE);
000014  2001              MOVS     r0,#1
;;;121    }
000016  bd10              POP      {r4,pc}
;;;122    
                          ENDP

                  |L24.24|
                          DCD      USBD_EndPointStall
                  |L24.28|
                          DCD      ||.bss||+0x1f
                  |L24.32|
                          DCD      ||.data||

                          AREA ||i.USBD_MSC_Reset_Event||, CODE, READONLY, ALIGN=1

                  USBD_MSC_Reset_Event PROC
;;;1115   
;;;1116   void USBD_MSC_Reset_Event(void)
000000  f7ffbffe          B.W      USBD_MSC_Reset
;;;1117   {
;;;1118       USBD_MSC_Reset();
;;;1119   }
;;;1120   
                          ENDP


                          AREA ||i.USBD_MSC_ServiceActionIn16||, CODE, READONLY, ALIGN=2

                  USBD_MSC_ServiceActionIn16 PROC
;;;826    
;;;827    void USBD_MSC_ServiceActionIn16(void)
000000  b570              PUSH     {r4-r6,lr}
;;;828    {
;;;829        if (!USBD_MSC_DataInFormat()) {
000002  f7fffffe          BL       USBD_MSC_DataInFormat
000006  2800              CMP      r0,#0
000008  d01d              BEQ      |L26.70|
;;;830            return;
;;;831        }
;;;832    
;;;833        USBD_MSC_BulkBuf[ 0] = 0x20;
00000a  480f              LDR      r0,|L26.72|
00000c  2220              MOVS     r2,#0x20
;;;834        USBD_MSC_BulkBuf[ 1] = 0x00;
00000e  2100              MOVS     r1,#0
000010  7002              STRB     r2,[r0,#0]            ;833
000012  7041              STRB     r1,[r0,#1]
;;;835        USBD_MSC_BulkBuf[31] = 0x00;
;;;836        BulkLen = 32;
000014  4c0d              LDR      r4,|L26.76|
000016  77c1              STRB     r1,[r0,#0x1f]         ;835
;;;837        BulkStage = MSC_BS_DATA_IN_LAST;
000018  2003              MOVS     r0,#3
00001a  6322              STR      r2,[r4,#0x30]  ; BulkLen
00001c  7020              STRB     r0,[r4,#0]
;;;838        USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, USBD_MSC_BulkBuf, BulkLen);
00001e  480c              LDR      r0,|L26.80|
000020  4909              LDR      r1,|L26.72|
000022  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkin
000024  f0400080          ORR      r0,r0,#0x80
000028  f7fffffe          BL       USBD_WriteEP
;;;839        USBD_MSC_CSW.dDataResidue -= BulkLen;
00002c  4809              LDR      r0,|L26.84|
00002e  4605              MOV      r5,r0
000030  f7fffffe          BL       __aeabi_uread4
000034  6b21              LDR      r1,[r4,#0x30]  ; BulkLen
000036  1a40              SUBS     r0,r0,r1
000038  4629              MOV      r1,r5
00003a  f7fffffe          BL       __aeabi_uwrite4
;;;840        USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
00003e  4905              LDR      r1,|L26.84|
000040  2001              MOVS     r0,#1
000042  3908              SUBS     r1,r1,#8
000044  7308              STRB     r0,[r1,#0xc]
                  |L26.70|
;;;841    }
000046  bd70              POP      {r4-r6,pc}
;;;842    
                          ENDP

                  |L26.72|
                          DCD      USBD_MSC_BulkBuf
                  |L26.76|
                          DCD      ||.data||
                  |L26.80|
                          DCD      usbd_msc_ep_bulkin
                  |L26.84|
                          DCD      ||.bss||+0x27

                          AREA ||i.USBD_MSC_SetCSW||, CODE, READONLY, ALIGN=2

                  USBD_MSC_SetCSW PROC
;;;1007   
;;;1008   void USBD_MSC_SetCSW(void)
000000  b510              PUSH     {r4,lr}
;;;1009   {
;;;1010       USBD_MSC_CSW.dSignature = MSC_CSW_Signature;
000002  4908              LDR      r1,|L27.36|
000004  4808              LDR      r0,|L27.40|
000006  f7fffffe          BL       __aeabi_uwrite4
;;;1011       USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, (U8 *)&USBD_MSC_CSW, sizeof(USBD_MSC_CSW));
00000a  4808              LDR      r0,|L27.44|
00000c  220d              MOVS     r2,#0xd
00000e  4905              LDR      r1,|L27.36|
000010  7800              LDRB     r0,[r0,#0]  ; usbd_msc_ep_bulkin
000012  f0400080          ORR      r0,r0,#0x80
000016  f7fffffe          BL       USBD_WriteEP
;;;1012       BulkStage = MSC_BS_CSW;
00001a  4905              LDR      r1,|L27.48|
00001c  2005              MOVS     r0,#5
00001e  7008              STRB     r0,[r1,#0]
;;;1013   }
000020  bd10              POP      {r4,pc}
;;;1014   
                          ENDP

000022  0000              DCW      0x0000
                  |L27.36|
                          DCD      ||.bss||+0x1f
                  |L27.40|
                          DCD      0x53425355
                  |L27.44|
                          DCD      usbd_msc_ep_bulkin
                  |L27.48|
                          DCD      ||.data||

                          AREA ||i.USBD_MSC_SetStallEP||, CODE, READONLY, ALIGN=2

                  USBD_MSC_SetStallEP PROC
;;;77     
;;;78     void USBD_MSC_SetStallEP(U32 EPNum)        /* set EP halt status according stall status */
000000  b510              PUSH     {r4,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80         USBD_SetStallEP(EPNum);
000004  f7fffffe          BL       USBD_SetStallEP
;;;81         USBD_EndPointHalt  |= (EPNum & 0x80) ? ((1 << 16) << (EPNum & 0x0F)) : (1 << EPNum);
000008  0620              LSLS     r0,r4,#24
00000a  d505              BPL      |L28.24|
00000c  f004010f          AND      r1,r4,#0xf
000010  f44f3080          MOV      r0,#0x10000
000014  4088              LSLS     r0,r0,r1
000016  e001              B        |L28.28|
                  |L28.24|
000018  2001              MOVS     r0,#1
00001a  40a0              LSLS     r0,r0,r4
                  |L28.28|
00001c  4902              LDR      r1,|L28.40|
00001e  680a              LDR      r2,[r1,#0]  ; USBD_EndPointHalt
000020  4310              ORRS     r0,r0,r2
000022  6008              STR      r0,[r1,#0]  ; USBD_EndPointHalt
;;;82     }
000024  bd10              POP      {r4,pc}
;;;83     
                          ENDP

000026  0000              DCW      0x0000
                  |L28.40|
                          DCD      USBD_EndPointHalt

                          AREA ||i.USBD_MSC_StartStopUnit||, CODE, READONLY, ALIGN=2

                  USBD_MSC_StartStopUnit PROC
;;;598    
;;;599    void USBD_MSC_StartStopUnit(void)
000000  480a              LDR      r0,|L29.44|
;;;600    {
000002  b510              PUSH     {r4,lr}
;;;601        if (!USBD_MSC_CBW.CB[3]) {               /* If power condition modifier is 0 */
000004  7c81              LDRB     r1,[r0,#0x12]  ; USBD_MSC_CBW
;;;602            USBD_MSC_MediaReady  = USBD_MSC_CBW.CB[4] & 0x01;   /* Media ready = START bit value */
;;;603            usbd_msc_start_stop(USBD_MSC_MediaReady);
;;;604            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED; /* Start Stop Unit -> pass */
000006  f100041f          ADD      r4,r0,#0x1f
00000a  b129              CBZ      r1,|L29.24|
;;;605            USBD_MSC_SetCSW();
;;;606            return;
;;;607        }
;;;608    
;;;609        USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;   /* Start Stop Unit -> fail */
00000c  2001              MOVS     r0,#1
                  |L29.14|
00000e  7320              STRB     r0,[r4,#0xc]
;;;610        USBD_MSC_SetCSW();
000010  e8bd4010          POP      {r4,lr}
000014  f7ffbffe          B.W      USBD_MSC_SetCSW
                  |L29.24|
000018  7cc0              LDRB     r0,[r0,#0x13]         ;602  ; USBD_MSC_CBW
00001a  4905              LDR      r1,|L29.48|
00001c  f0000001          AND      r0,r0,#1              ;602
000020  6048              STR      r0,[r1,#4]            ;603  ; USBD_MSC_MediaReady
000022  f7fffffe          BL       usbd_msc_start_stop
000026  2000              MOVS     r0,#0                 ;604
000028  e7f1              B        |L29.14|
;;;611    }
;;;612    
                          ENDP

00002a  0000              DCW      0x0000
                  |L29.44|
                          DCD      ||.bss||
                  |L29.48|
                          DCD      ||.data||

                          AREA ||i.USBD_MSC_SynchronizeCache||, CODE, READONLY, ALIGN=2

                  USBD_MSC_SynchronizeCache PROC
;;;781    
;;;782    void USBD_MSC_SynchronizeCache(void)
000000  4902              LDR      r1,|L30.12|
;;;783    {
;;;784        /* Synchronize check always passes as we always write data dirrectly
;;;785           so cache is always synchronized                                          */
;;;786        USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
000002  2000              MOVS     r0,#0
000004  7308              STRB     r0,[r1,#0xc]
;;;787        USBD_MSC_SetCSW();
000006  f7ffbffe          B.W      USBD_MSC_SetCSW
;;;788    }
;;;789    
                          ENDP

00000a  0000              DCW      0x0000
                  |L30.12|
                          DCD      ||.bss||+0x1f

                          AREA ||i.USBD_MSC_TestUnitReady||, CODE, READONLY, ALIGN=2

                  USBD_MSC_TestUnitReady PROC
;;;477    
;;;478    void USBD_MSC_TestUnitReady(void)
000000  b510              PUSH     {r4,lr}
;;;479    {
;;;480        if (USBD_MSC_CBW.dDataLength != 0) {
000002  4810              LDR      r0,|L31.68|
000004  f7fffffe          BL       __aeabi_uread4
;;;481            if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {
;;;482                USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
;;;483            } else {
;;;484                USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
;;;485            }
;;;486    
;;;487            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
000008  4c0e              LDR      r4,|L31.68|
00000a  3417              ADDS     r4,r4,#0x17
00000c  b178              CBZ      r0,|L31.46|
00000e  f1a4001f          SUB      r0,r4,#0x1f           ;481
000012  7b00              LDRB     r0,[r0,#0xc]          ;481  ; USBD_MSC_CBW
000014  0600              LSLS     r0,r0,#24             ;481
000016  d504              BPL      |L31.34|
000018  480b              LDR      r0,|L31.72|
00001a  7800              LDRB     r0,[r0,#0]            ;482  ; usbd_msc_ep_bulkin
00001c  f0400080          ORR      r0,r0,#0x80           ;482
000020  e001              B        |L31.38|
                  |L31.34|
000022  480a              LDR      r0,|L31.76|
000024  7800              LDRB     r0,[r0,#0]            ;484  ; usbd_msc_ep_bulkout
                  |L31.38|
000026  f7fffffe          BL       USBD_MSC_SetStallEP
00002a  2001              MOVS     r0,#1
00002c  e004              B        |L31.56|
                  |L31.46|
;;;488            USBD_MSC_SetCSW();
;;;489            return;
;;;490        }
;;;491    
;;;492        if (!USBD_MSC_CheckMedia()) {
00002e  f7fffffe          BL       USBD_MSC_CheckMedia
000032  2800              CMP      r0,#0
000034  d005              BEQ      |L31.66|
;;;493            return;
;;;494        }
;;;495    
;;;496        USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
000036  2000              MOVS     r0,#0
                  |L31.56|
000038  7320              STRB     r0,[r4,#0xc]
;;;497        USBD_MSC_SetCSW();
00003a  e8bd4010          POP      {r4,lr}
00003e  f7ffbffe          B.W      USBD_MSC_SetCSW
                  |L31.66|
;;;498    }
000042  bd10              POP      {r4,pc}
;;;499    
                          ENDP

                  |L31.68|
                          DCD      ||.bss||+0x8
                  |L31.72|
                          DCD      usbd_msc_ep_bulkin
                  |L31.76|
                          DCD      usbd_msc_ep_bulkout

                          AREA ||i.usbd_msc_init||, CODE, READONLY, ALIGN=1

                  usbd_msc_init PROC
;;;51     /* Dummy Weak Functions that need to be provided by user */
;;;52     __weak void usbd_msc_init()
000000  4770              BX       lr
;;;53     {
;;;54     
;;;55     }
;;;56     __weak void usbd_msc_read_sect(U32 block, U8 *buf, U32 num_of_blocks)
                          ENDP


                          AREA ||i.usbd_msc_read_sect||, CODE, READONLY, ALIGN=1

                  usbd_msc_read_sect PROC
;;;55     }
;;;56     __weak void usbd_msc_read_sect(U32 block, U8 *buf, U32 num_of_blocks)
000000  4770              BX       lr
;;;57     {
;;;58     
;;;59     }
;;;60     __weak void usbd_msc_write_sect(U32 block, U8 *buf, U32 num_of_blocks)
                          ENDP


                          AREA ||i.usbd_msc_start_stop||, CODE, READONLY, ALIGN=1

                  usbd_msc_start_stop PROC
;;;63     }
;;;64     __weak void usbd_msc_start_stop(BOOL start)
000000  4770              BX       lr
;;;65     {
;;;66     
;;;67     }
;;;68     
                          ENDP


                          AREA ||i.usbd_msc_write_sect||, CODE, READONLY, ALIGN=1

                  usbd_msc_write_sect PROC
;;;59     }
;;;60     __weak void usbd_msc_write_sect(U32 block, U8 *buf, U32 num_of_blocks)
000000  4770              BX       lr
;;;61     {
;;;62     
;;;63     }
;;;64     __weak void usbd_msc_start_stop(BOOL start)
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USBD_MSC_CBW
                          %        31
                  USBD_MSC_CSW
                          %        13

                          AREA ||.data||, DATA, ALIGN=2

                  BulkStage
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  USBD_MSC_MediaReady
                          DCD      0x00000000
                  USBD_MSC_ReadOnly
                          DCD      0x00000000
                  USBD_MSC_MediaReadyEx
                          DCD      0x00000000
                  USBD_MSC_BlockSize
                          DCD      0x00000000
                  USBD_MSC_BlockGroup
                          DCD      0x00000000
                  USBD_MSC_BlockCount
                          DCD      0x00000000
                  USBD_MSC_BlockBuf
                          DCD      0x00000000
                  MemOK
                          DCD      0x00000000
                  Block
                          DCD      0x00000000
                  Offset
                          DCD      0x00000000
                  Length
                          DCD      0x00000000
                  BulkLen
                          DCD      0x00000000

                          AREA ||area_number.40||, DATA, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.data||
                  USBD_MSC_MemorySize
                          DCD      0x00000000
