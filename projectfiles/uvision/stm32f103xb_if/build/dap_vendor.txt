; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\dap_vendor.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\dap_vendor.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DDAPLINK_VERSION=254 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\dap_vendor.crf ..\..\..\source\daplink\cmsis-dap\DAP_vendor.c]
                          THUMB

                          AREA ||i.DAP_ProcessVendorCommand||, CODE, READONLY, ALIGN=2

                  DAP_ProcessVendorCommand PROC
;;;60     */
;;;61     uint32_t DAP_ProcessVendorCommand(const uint8_t *request, uint8_t *response) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;62       uint32_t num = (1U << 16) | 1U;
;;;63     
;;;64       *response++ = *request;        // copy Command ID
000004  7802              LDRB     r2,[r0,#0]
000006  f8012b01          STRB     r2,[r1],#1
00000a  460d              MOV      r5,r1
;;;65     
;;;66       switch (*request++) {          // first byte in request is Command ID
00000c  f8101b01          LDRB     r1,[r0],#1
000010  f04f1401          MOV      r4,#0x10001           ;62
;;;67         case ID_DAP_Vendor0: {
;;;68             const char *id_str = info_get_unique_id();
;;;69             uint8_t len = strlen(id_str);
;;;70             *response++ = len;
;;;71             memcpy(response, id_str, len);
;;;72             num += (len + 1); // increment response count by ID length + length byte
;;;73             break;
;;;74         }
;;;75         case ID_DAP_Vendor1: {
;;;76             // get line coding
;;;77             int32_t read_len = sizeof(CDC_LINE_CODING);
;;;78             CDC_LINE_CODING cdc_line_coding;
;;;79             USBD_CDC_ACM_PortGetLineCoding(&cdc_line_coding);
;;;80             memcpy(response, &cdc_line_coding, read_len);
;;;81             num += (read_len + 1);
;;;82             break;
;;;83         }
;;;84         case ID_DAP_Vendor2: {
;;;85             // set uart configuration
;;;86             CDC_LINE_CODING cdc_line_coding;
;;;87             USBD_CDC_ACM_PortGetLineCoding(&cdc_line_coding);
;;;88             //set BaudRate
;;;89             uint32_t baud_rate = 0;
;;;90             memcpy(&baud_rate, request, sizeof(uint32_t));
;;;91             cdc_line_coding.dwDTERate = baud_rate;
;;;92             USBD_CDC_ACM_PortSetLineCoding(&cdc_line_coding);
;;;93             USBD_CDC_ACM_SendBreak(0);
;;;94             *response = 1;
;;;95             num += (sizeof(uint32_t) << 16) | 1;
;;;96             break;
;;;97         }
;;;98         case ID_DAP_Vendor3:  {
;;;99             // uart read
;;;100            int32_t read_len = 62;
;;;101            read_len = uart_read_data(response + 1, read_len);
;;;102            response[0] = read_len;
;;;103            // increment request and response count
;;;104            num += (read_len + 1);
;;;105            break;
;;;106        }
;;;107        case ID_DAP_Vendor4:  {
;;;108            // uart write
;;;109            int32_t write_len = *request;
;;;110            request++;
;;;111            uart_write_data((uint8_t *)request, write_len);
;;;112            *response = 1;
;;;113            num += ((write_len + 1) << 16) | 1;
;;;114            break;
;;;115        }
;;;116        case ID_DAP_Vendor5:  break;
;;;117        case ID_DAP_Vendor6:  break;
;;;118        case ID_DAP_Vendor7:  break;
;;;119        case ID_DAP_Vendor8: {
;;;120            *response = 1;
;;;121            if (0 == *request) {
;;;122                main_usb_set_test_mode(false);
;;;123            } else if (1 == *request) {
;;;124                main_usb_set_test_mode(true);
;;;125            } else {
;;;126                *response = 0;
;;;127            }
;;;128            num += (1U << 16) | 1U; // increment request and response count each by 1
;;;129            break;
;;;130        }
;;;131        case ID_DAP_Vendor9: {
;;;132            // reset target
;;;133            *response = 1;
;;;134            if (!config_get_auto_rst()) {
;;;135                target_set_state(RESET_RUN);
;;;136            }
;;;137            num += 1;
000014  1c67              ADDS     r7,r4,#1
000016  3980              SUBS     r1,r1,#0x80
000018  4606              MOV      r6,r0                 ;66
00001a  f04f0a00          MOV      r10,#0                ;66
00001e  f04f0801          MOV      r8,#1                 ;94
000022  f04f1902          MOV      r9,#0x20002           ;128
000026  290d              CMP      r1,#0xd               ;66
000028  d274              BCS      |L1.276|
00002a  e8dff001          TBB      [pc,r1]               ;66
00002e  0717              DCB      0x07,0x17
000030  22384173          DCB      0x22,0x38,0x41,0x73
000034  73734956          DCB      0x73,0x73,0x49,0x56
000038  60656900          DCB      0x60,0x65,0x69,0x00
00003c  f7fffffe          BL       info_get_unique_id
000040  4606              MOV      r6,r0                 ;68
000042  f7fffffe          BL       strlen
000046  b2c4              UXTB     r4,r0                 ;69
000048  702c              STRB     r4,[r5,#0]            ;70
00004a  1c68              ADDS     r0,r5,#1              ;70
00004c  4622              MOV      r2,r4                 ;71
00004e  4631              MOV      r1,r6                 ;71
000050  f7fffffe          BL       __aeabi_memcpy
000054  f5043480          ADD      r4,r4,#0x10000        ;71
000058  1ca4              ADDS     r4,r4,#2              ;71
00005a  e05b              B        |L1.276|
00005c  2407              MOVS     r4,#7                 ;77
00005e  4668              MOV      r0,sp                 ;79
000060  f7fffffe          BL       USBD_CDC_ACM_PortGetLineCoding
000064  4622              MOV      r2,r4                 ;80
000066  4669              MOV      r1,sp                 ;80
000068  4628              MOV      r0,r5                 ;80
00006a  f7fffffe          BL       __aeabi_memcpy
00006e  4c2b              LDR      r4,|L1.284|
000070  e050              B        |L1.276|
000072  4668              MOV      r0,sp                 ;87
000074  f7fffffe          BL       USBD_CDC_ACM_PortGetLineCoding
000078  2204              MOVS     r2,#4                 ;90
00007a  4631              MOV      r1,r6                 ;90
00007c  a802              ADD      r0,sp,#8              ;90
00007e  f8cda008          STR      r10,[sp,#8]           ;90
000082  f7fffffe          BL       __aeabi_memcpy
000086  9802              LDR      r0,[sp,#8]            ;91
000088  9000              STR      r0,[sp,#0]            ;92
00008a  4668              MOV      r0,sp                 ;92
00008c  f7fffffe          BL       USBD_CDC_ACM_PortSetLineCoding
000090  2000              MOVS     r0,#0                 ;93
000092  f7fffffe          BL       USBD_CDC_ACM_SendBreak
000096  f8858000          STRB     r8,[r5,#0]            ;94
00009a  4c21              LDR      r4,|L1.288|
00009c  e03a              B        |L1.276|
00009e  213e              MOVS     r1,#0x3e              ;101
0000a0  1c68              ADDS     r0,r5,#1              ;101
0000a2  f7fffffe          BL       uart_read_data
0000a6  f5003480          ADD      r4,r0,#0x10000        ;102
0000aa  7028              STRB     r0,[r5,#0]            ;102
0000ac  1ca4              ADDS     r4,r4,#2              ;102
0000ae  e031              B        |L1.276|
0000b0  7837              LDRB     r7,[r6,#0]            ;109
0000b2  1c70              ADDS     r0,r6,#1              ;110
0000b4  4639              MOV      r1,r7                 ;111
0000b6  f7fffffe          BL       uart_write_data
0000ba  f8858000          STRB     r8,[r5,#0]            ;112
0000be  e025              B        |L1.268|
0000c0  f8858000          STRB     r8,[r5,#0]            ;120
0000c4  7830              LDRB     r0,[r6,#0]            ;121
0000c6  b128              CBZ      r0,|L1.212|
0000c8  2801              CMP      r0,#1                 ;123
0000ca  d003              BEQ      |L1.212|
0000cc  f885a000          STRB     r10,[r5,#0]           ;126
                  |L1.208|
0000d0  464c              MOV      r4,r9                 ;128
0000d2  e01f              B        |L1.276|
                  |L1.212|
0000d4  f7fffffe          BL       main_usb_set_test_mode
0000d8  e7fa              B        |L1.208|
0000da  f8858000          STRB     r8,[r5,#0]            ;133
0000de  f7fffffe          BL       config_get_auto_rst
0000e2  b910              CBNZ     r0,|L1.234|
0000e4  2002              MOVS     r0,#2                 ;135
0000e6  f7fffffe          BL       target_set_state
                  |L1.234|
0000ea  463c              MOV      r4,r7
;;;138            break;
0000ec  e012              B        |L1.276|
;;;139        }
;;;140    #ifdef DRAG_N_DROP_SUPPORT
;;;141        case ID_DAP_Vendor10: {
;;;142            // open mass storage device stream
;;;143            *response = stream_open((stream_type_t)(*request));
0000ee  7830              LDRB     r0,[r6,#0]
0000f0  f7fffffe          BL       stream_open
0000f4  7028              STRB     r0,[r5,#0]
;;;144            num += (1 << 16) | 1;
;;;145            break;
0000f6  e7eb              B        |L1.208|
;;;146        }
;;;147        case ID_DAP_Vendor11: {
;;;148            // close mass storage device stream
;;;149            *response = stream_close();
0000f8  f7fffffe          BL       stream_close
0000fc  7028              STRB     r0,[r5,#0]
;;;150            num += 1;
;;;151            break;
0000fe  e7f4              B        |L1.234|
;;;152        }
;;;153        case ID_DAP_Vendor12: {
;;;154            // write to mass storage device
;;;155            uint32_t write_len = *request;
000100  7837              LDRB     r7,[r6,#0]
;;;156            request++;
000102  1c70              ADDS     r0,r6,#1
;;;157            *response = stream_write((uint8_t *)request, write_len);
000104  4639              MOV      r1,r7
000106  f7fffffe          BL       stream_write
00010a  7028              STRB     r0,[r5,#0]
                  |L1.268|
00010c  eb044407          ADD      r4,r4,r7,LSL #16      ;113
000110  f1041401          ADD      r4,r4,#0x10001        ;113
                  |L1.276|
;;;158            num += ((write_len + 1) << 16) | 1;
;;;159            break;
;;;160        }
;;;161    #endif
;;;162        case ID_DAP_Vendor13: break;
;;;163        case ID_DAP_Vendor14: break;
;;;164        case ID_DAP_Vendor15: break;
;;;165        case ID_DAP_Vendor16: break;
;;;166        case ID_DAP_Vendor17: break;
;;;167        case ID_DAP_Vendor18: break;
;;;168        case ID_DAP_Vendor19: break;
;;;169        case ID_DAP_Vendor20: break;
;;;170        case ID_DAP_Vendor21: break;
;;;171        case ID_DAP_Vendor22: break;
;;;172        case ID_DAP_Vendor23: break;
;;;173        case ID_DAP_Vendor24: break;
;;;174        case ID_DAP_Vendor25: break;
;;;175        case ID_DAP_Vendor26: break;
;;;176        case ID_DAP_Vendor27: break;
;;;177        case ID_DAP_Vendor28: break;
;;;178        case ID_DAP_Vendor29: break;
;;;179        case ID_DAP_Vendor30: break;
;;;180        case ID_DAP_Vendor31: break;
;;;181        default: break;
;;;182      }
;;;183    
;;;184      return (num);
000114  4620              MOV      r0,r4
;;;185    }
000116  e8bd8ffe          POP      {r1-r11,pc}
;;;186    
                          ENDP

00011a  0000              DCW      0x0000
                  |L1.284|
                          DCD      0x00010009
                  |L1.288|
                          DCD      0x00050002

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\daplink\\cmsis-dap\\DAP_vendor.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_DAP_vendor_c_ba376029____REV16|
#line 129 "..\\..\\..\\source\\cmsis-core\\core_cmInstr.h"
|__asm___12_DAP_vendor_c_ba376029____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_DAP_vendor_c_ba376029____REVSH|
#line 144
|__asm___12_DAP_vendor_c_ba376029____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
